{"pageProps":{"workshop":{"slug":"command-line","content":"\n# Acknowledgements\n\nTODO: Add acknowledgements to metadata\n\n- Current Author: [Stefano Morello](https://github.com/smorello87)\n- Past contributing Author: [Kelsey Chatlosh](https://github.com/kchatlosh)\n- Past contributing Author: [Patrick Smyth](https://github.com/smythp)\n- Past contributing Author: [Mary Catherine McKinniburgh](https://github.com/mckinniburgh)\n- Past contributing Author: [Jojo Karlin](https://github.com/jojokarlin/)\n- Past contributing Author: [Kalle Westerling](https://github.com/kallewesterling)\n- Past reviewer: [Di Yoong](https://github.com/dyoong)\n- Current editor: [Lisa Rhody](https://github.com/lmrhody)\n- Current editor: [Kalle Westerling](https://github.com/kallewesterling)\n\n# What Is the Command Line?\n\nThe command line is a text-based way of interacting with your computer. You may hear it called different names, such as the terminal, the shell, or bash. In practice, you can use these terms interchangeably. (If you're curious, though, you can read more about them [in the glossary](https://github.com/DHRI-Curriculum/glossary/blob/v2.0/terms/command-line.md).) The shell we use (whether terminal, shell, or bash) is a program that accepts commands as text input and converts commands into appropriate operating system functions.\n\nThe command line (of computers today) receives these commands as text that is typed in.\n\n## What Does \"Text-based\" Mean?\n\nFor those of us comfortable reading and writing, the idea of \"text-based\" in the context of computers can seem a bit strange. As we start to get comfortable typing commands to the computer, it's important to distinguish \"text\" from word processed, desktop publishing. In the latter case, we use software (think Microsoft Word or Google Docs) that displays what we want to produce without showing us the code the computer is reading to render the formatting. On the other hand, while less pretty to look at, plain text has the advantage of being manipulable in different contexts.\n\nLet's take a quick moment to discuss text and text editors.\n\n# Text Editors\n\n## What is Text?\n\nBefore we explain which program we'll be using for editing text, we want to give a general sense of this \"text\" we keep mentioning. For those of us in the humanities, whether we follow literary theorists who read any object as a \"text\" or we dive into philology, paleography, codicology or any of the fields [David Greetham](https://en.wikipedia.org/wiki/David_Greetham_(textual_scholar)) lays out in _Textual Scholarship_, \"text\" has its specific meanings. As scholars working with computers, we need to be aware of the ways plain text and formatted text differ. Words on a screen may have hidden formatting. Many of us learned to use a word processor like Microsoft Word and don't realize how much is going on behind the words shown on the screen. For the purposes of communicating with the computer and for easier movement between different programs, we need to use text without hidden formatting.\n\n![Word Doc](/images/command-line/worddoc.png)\n\nUsers with visual disabilities, [click here](https://github.com/DHRI-Curriculum/command-line/raw/v2.0/files/WordProcessorExample.docx) to download the Word file.\n\nIf you ask the command line to read that file, this Word `.docx` file will look something like this\n\n![Word Doc as visualized by Command Line](/images/command-line/CatWordDoc.png)\n\nUsers with visual disabilities, [click here](https://raw.githubusercontent.com/DHRI-Curriculum/command-line/v2.0/files/PK.md) to download the text file.\n\nWord documents which look like \"just words!\" are actually comprised of an archive of extensible markup language (XML) instructions that only Microsoft Word can read. Plain text files can be opened in a number of different editors and can be read within the command line.\n\n## Plain Text\n\nFor the purposes of communicating with machines and between machines, we need characters to be as flexible as possible. Plain text include characters of readable material but not graphical representation.\n\nAccording to the [Unicode Standard](https://unicode.org/versions/Unicode13.0.0/),\n\n> Plain text is a pure sequence of character codes; plain Unicode-encoded text is therefore a sequence of Unicode character codes.\n\nPlain text shows its cards—if it's marked up, the markup will be human readable. Plain text can be moved between programs more fluidly and can respond to programmatic manipulations. Because it is not tied to a particular font or color or placement, plain text can be styled externally.\n\nA counterpoint to plain text is rich text (sometimes denoted by the Microsoft rich text format `.rtf` file extension) or \"enriched text\" (sometimes seen as an option in email programs). In rich text files, plain text is elaborated with formatting specific to the program in which they are made.\n\nPlain text has two main properties in regard to rich text:\n\n> Plain text is the underlying content stream to which formatting can be applied. Plain text is public, standardized, and universally readable.\n\n## Choosing a Text Editor\n\nAn important tool for programming and working in the command line is a text editor. A text editor is a program that allows you to edit plain text files, such as `.txt`, `.csv`, or `.md`. Text editors are not used to edit rich text documents, such as `.docx` or `.rtf`, and rich text editors should not be used to edit plain text files. This is because rich text editors will add many invisible special characters that will prevent programs from running and configuration files from being read correctly.\n\nWhile it doesn't really matter which text editor you choose, you should try to become comfortable with at least one text editor.\n\nChoosing a text editor has as much to do with personality as it does with functionality. Graphical user interfaces (GUIs), user options, and \"hackability\" vary from program to program.\n\n## Default Recommendation\n\nFor our workshops, we will be using [Visual Studio Code](https://code.visualstudio.com/). Not only is Visual Studio Code free and open source, but it is also consistent across macOS, Windows, and Linux systems.\n\nYou will have downloaded Visual Studio Code according to the [instructions](https://github.com/DHRI-Curriculum/install/blob/v2.0/guides/visual-studio-code.md) on the installations page. We won't be using the editor a lot in this tutorial, so don't worry about getting to know the editor now. In other workshops we will discuss syntax highlighting and version control, which Visual Studio Code supports. For now we will get back to working in the command line itself.\n\n## Evaluation\n\n1. What is the difference between a plain text document and a rich text document? (Select all that apply)\n\n<Quiz>\n- Plain text contains no formatting, only line breaks and spacing.*\n- Plain text cannot be marked up.\n- Rich text is styled text, _i.e.,_ plain text completed by information such as font size, format, and colors.*\n- One can't determine whether there is a difference between the two without looking at their content.\n</Quiz>\n\n2. What is the Command Line? How is it different from your text editor?\n\n# Why is the Command Line Useful?\n\nInitially, for some of us, the command line can feel a bit unfamiliar. Why step away from a point-and-click workflow? By using the command line, we move into an environment where we have more minute control over each task we'd like the computer to perform. Instead of ordering your food in a restaurant, you're stepping into the kitchen. It's more work, but there are also more possibilities.\n\nThe command line allows you to...\n\n- Easily automate tasks such as creating, copying, and converting files.\n- Set up your programming environment.\n- Run programs you create.\n- Access the (many) programs and utilities that do not have graphical equivalents.\n- Control other computers remotely.\n\nIn addition to being a useful tool in itself, the command line gives you access to a second set of programs and utilities and is a complement to learning programming.\n\nWhat if all these cool possibilities seem a bit abstract to you right now? That's alright! On a very basic level, most uses of the command line are about **showing information** that the computer has, or **modifying or making** things (files, programs, etc.) on the computer.\n\nIn the next section, we'll make this a little more clear by getting started with the command line.\n\n# Getting to the Command Line\n\n## macOS\n\nIf you're using macOS:\n\n1. Click the Spotlight Search button (the magnifying glass) in the top right of your desktop.\n\n2. Type `terminal` into the bar that appears.\n\n3. Select the first item that appears in the list.\n\n4. When the Terminal pops up, you will likely see either a window with black text over white background or colored text over a black background.\n\n![Terminal in macOS](/images/command-line/osx_term.png)\n\nPlease note: You can change the color of your Terminal or BashShell background and text by selecting `Shell` from the top menu bar, then selecting a theme from the menu under `New Window`.\n\nBonus points: if you really want to get the groove of just typing instead of pointing and clicking, you can hold the <kbd>command (⌘)</kbd> key while and press <kbd>space</kbd> to pull up Spotlight search, start typing `Terminal,` and then hit <kbd>enter</kbd> to open a terminal window. This will pull up a terminal window without touching your mousepad. For super bonus points, try to navigate like this for the next fifteen minutes, or even the rest of this session—it is tricky and sometimes a bit tiring when you start, but you can really pick up speed when you practice!\n\n## Windows\n\nWe won't be using Windows's own non-UNIX version of the command line. Instead, we will use Git Bash. If you haven't installed it yet, you can follow [these instructions](https://github.com/DHRI-Curriculum/install/blob/v2.0/guides/git.md). The reason we use Git Bash as the command line on Windows is that it makes you able to run the same commands as you would on a computer running macOS or Linux. Git Bash includes core utilities available on Linux that are not available on Windows.\n\n1. Look for Git Bash in your programs menu and open.\n\n2. If you can't find the git folder, just type `git bash` in the search box and select `git bash` when it appears.\n\n3. Open the program.\n\n4. When the terminal pops up, you will likely see either a window with black text over white background or colored text over a black background.You know you're in the right place when you see the `$`.\n\n  _Note that the sign for you being in the right place might also be a `%` or a `#` depending on your operating system._\n\n![Terminal on Windows](/images/command-line/win_term.png)\n\nBonus points: if you really want to get the groove of just typing instead of pointing and clicking, you can press <kbd>windows</kbd> to open the Start menu, start typing `git bash` and then hit <kbd>enter</kbd> to open a git bash window. This will pull up a command window without touching your mousepad.\n\n## Command Prompt `$`\n\n`$`, which we will refer to as the \"command prompt,\" is the place you type commands you wish the computer to execute. We will now learn some of the most common commands.\n\nWhen you see the `$`, you're in the right place. As noted above, however, the sign varies somewhat between systems, and sometimes the sign is a `%` or a `#`. We call the sign the _command prompt_; it lets us know the computer is ready to receive a command.\n\nIn the following lessons, we will refer to the command prompt using a `$`. Just make a note now of your sign, if it differs from the dollar sign. You will be able to follow along just fine as long as you understand that they all are different ways of knowing that you are \"at the _command prompt_.\"\n\n# Prefatory Pro Tips\n\nBefore we get started, I wanted to give you a couple of tips of things to keep in mind.\n\n1. Go slow at first and check your spelling! One of the biggest things you can do to make sure your code runs correctly and you can use the command line successfully is to make sure you check your spelling! _Keep this in mind!_ If at first something doesn't work, check your spelling! Unlike in human reading, where letters operate simultaneously as atomistic symbols and as complex contingencies (check [Johanna Drucker](https://genius.com/Johanna-drucker-from-a-to-screen-annotated) on the alphabet), in coding, each character has a discrete function including (especially!) spaces.\n\n2. Keep in mind that the command line and file systems on macOS and Unix are usually pre-configured as cAsE-pReSeRvInG—so capitalizations also matter when typing commands and file and folder names.\n\n3. While copying and pasting from this handy tutorial may be tempting to avoid spelling errors and other things, we encourage you not to! Typing out each command will help you remember them and how they work.\n\nNow, we are ready to get started.\n\n# Navigation\n\n## Getting started: know thyself\n\nYou may also see your username to the left of the command prompt `$`. Let's try our first command. Type the following and press <kbd>enter</kbd> on your keyboard:\n\n```console\n$ whoami\n```\n\nThe `whoami` command should print out your username. Congrats, you've executed your first command! This is a basic pattern of use in the command line: type a command, press <kbd>enter</kbd> on your keyboard, and receive output.\n\n## Orienting Yourself in the Command Line: Folders\n\nOK, we're going to try another command. But first, let's make sure we understand some things about how your computer's filesystem works.\n\nYour computer's files are organized in what's known as a hierarchical filesystem. That means there's a top level or `root` folder on your system. That folder has other folders in it, and those folders have folders in them, and so on. You can draw these relationships in a tree:\n\n![An example of how a hierarchical filesystem looks](/images/command-line/hierarchical-filesystem-example.png)\n\nThe root or highest-level folder on macOS is just called `/`. We won't need to go in there, though, since that's mostly just files for the operating system. On Windows, the root directory is usually called `C:`. (If you are curious why `C:` is the default name on Windows, you can read about it [here](http://www.todayifoundout.com/index.php/2015/04/c-drive-default-windows-based-computers-2).)\n\nNote that we are using the word \"directory\" interchangeably with \"folder\"—they both refer to the same thing.\n\nOK, let's try a command that tells us where we are in the filesystem:\n\n```console\n$ pwd\n```\n\nYou should get output like `/Users/your-username`. That means you're in the `your-username` directory in the `Users` folder inside the `/` or root directory. This directory is often called the \"home\" directory.\n\nOn Windows, your output would instead be `C:/Users/your-username`. The folder you're in is called the working directory, and `pwd` stands for \"print working directory.\" \"Print\" as a word can be somewhat misleading. The command `pwd` won't actually print anything except on your screen. This command is easier to grasp when we interpret \"print\" as \"display.\"\n\nNow we know \"where\" we are. But what if we want to know what files and folders are in the `your-username` directory, a.k.a. the working directory? Try entering:\n\n```console\n$ ls\n```\n\nYou should see a number of folders, probably including `Documents`, `Desktop`, and so on. You may also see some files. These are the contents of the current working directory. `ls` will \"list\" the contents of the directory you are in.\n\nWonder what's in the `Desktop` folder? Let's try navigating to it with the following command:\n\n```console\n$ cd Desktop\n```\n\nThe `cd` command lets us \"change directory.\" (Make sure the \"D\" in \"Desktop\" is capitalized.) If the command was successful, you won't see any output. This is normal—often, the command line will succeed silently.\n\nSo how do we know it worked? That's right, let's use our `pwd` command again. We should get:\n\n```console\n$ pwd\n/Users/your-username/Desktop\n```\n\nNow try `ls` again to see what's on your desktop. These three commands—`pwd`, `ls`, and `cd`—are the most commonly used in the terminal. Between them, you can orient yourself and move around.\n\nOne more command you might find useful is `cd ..` which will move you one directory up in the filesystem. That's a `cd` with two periods after it:\n\n```console\n$ cd ..\n```\n\n## Challenge\n\nBefore moving on, take a minute to navigate through our computer's file system using the command line. Use the three commands you've just learned—`pwd`, `ls` and `cd`—eight (8) times each. Go poking around your `Photos` folder, or see what's so special about that root `/` directory. When you're done, come back to your \"home\" folder with\n\n```console\n$ cd ~\n```\n\n(That's a tilde <kbd>~</kbd>, on the top left of your keyboard.) \n\n### Compare with the GUI\n\nIt's important to note that this is the same old information you can get by pointing and clicking displayed to you in a different way.\n\nGo ahead and use pointing and clicking to navigate to your working directory—you can get there a few ways, but try starting from \"My Computer\" and clicking down from there. You'll notice that the folder names should match the ones that the command line spits out for you, since it's the same information! We're just using a different mode of navigation around your computer to see it.\n\n## Solution\n\n1. Type `pwd` to see where on your computer you are located.\n2. Type `cd name-of-your-folder` to enter a subfolder.\n3. Type `ls` to see the content of that folder.\n4. Type `cd ..` to leave that folder.\n5. Type `pwd` to make sure you are back to the folder where you wish to be.\n6. Type `cd ~` to go back to your home folder.\n7. Type `pwd` to make sure you are in the folder where you wish to be.\n8. Type `cd /` to go back to your root folder.\n9. Type `ls` to see the content of folder you are currently in.\n10. Type `pwd` to make sure you are in the folder where you wish to be.\n11. Type `cd name-of-your-folder` to enter a subfolder.\n\n## Evaluation\n\n1. What command do you run if you are trying to identify where in the filesystem you are currently located/working?\n\n<Quiz>\n- $ `ls`\n- $ `pwd`*\n- $ `cd`\n- $ `whoami`\n</Quiz>\n\n2. When and why would you want to use the command line as opposed to your operating system's GUI?\n\n## Keywords\n\nDo you remember the glossary terms from this section?\n\n- [Filesystem](https://github.com/DHRI-Curriculum/glossary/blob/v2.0/terms/filesystem.md)\n- [GUI](https://github.com/DHRI-Curriculum/glossary/blob/v2.0/terms/gui.md)\n- [Root](https://github.com/DHRI-Curriculum/glossary/blob/v2.0/terms/root.md)\n\n# Creating Files and Folders\n\n## Creating a File\n\nSo far, we've only performed commands that give us information. Let's use a command that creates something on the computer.\n\nFirst, make sure you're in your home directory:\n\n```console\n$ pwd\n/Users/your-username\n```\n\nLet's move to the `Desktop` folder, or \"change directory\" with `cd`:\n\n```console\n$ cd Desktop\n```\n\nOnce you've made sure you're in the `Desktop` folder with `pwd`, let's try a new command:\n\n```console\n$ touch foo.txt\n```\n\nThe `touch` command is used to create a file without any content. This command can be used when you don’t have any data yet to store in it.\n\nIf the command succeeds, you won't see any output. Now move the terminal window and look at your \"real\" desktop, the graphical one. See any differences? If the command was successful and you were in the right place, you should see an empty text file called `foo.txt` on the desktop. Pretty cool, right?\n\n## Handy Tip: Up Arrow\n\nLet's say you liked that `foo.txt` file so much you'd like another! In the terminal window, press the <kbd>up arrow</kbd> on your keyboard. You'll notice this populates the line with the command that you just wrote. You can hit <kbd>enter</kbd> to create another `foo.txt,` (note - [`touch`](https://en.wikipedia.org/wiki/Touch_(Unix)) command will not overwrite your document nor will it add another document to the same directory, but it will update info about that file.) or you could use your left/right arrows to move the insert cursor around on the screen so you can, for instance, change the file name to `foot.txt` to create a different file.\n\nAs we start to write more complicated and longer commands in our terminal, the <kbd>up arrow</kbd> is a great shortcut so you don't have to spend lots of time typing.\n\n## Creating Folders\n\nOK, so we're going to be doing a lot of work during the Digital Humanities Research Institute. Let's create a `projects` folder on our desktop, where we can keep all our work in one place.\n\nFirst, let's check to make sure we're still in the `Desktop` folder with `pwd`:\n\n```console\n$ pwd\n/Users/your-username/Desktop\n```\n\nOnce you've double-checked you're in `Desktop`, we'll use the `mkdir` or \"make directory\" command to make a folder called `projects`:\n\n```console\n$ mkdir projects\n```\n\nNow run `ls` to see if a projects folder has appeared. Once you confirm that the projects folder was created successfully, `cd` into it.\n\n```console\n$ cd projects\n$ pwd\n/Users/your-username/Desktop/projects\n```\n\nOK, now you've got a projects folder that you can use throughout the Institute. It should be visible on your graphical desktop, just like the `foo.txt` file we created earlier.\n\n## Challenge\n\nTry and create a sub-folder and file on your own!\n\n## Solution\n\n1. Type `pwd` to see where on your computer you are located. If you are not in the `projects` folder we just created, navigate to that folder using the commands you learned in the [lesson on navigation](https://curriculum.dhinstitutes.org/workshops/command-line/lessons/?page=6).\n2. Type `mkdir name-of-your-subfolder` to create a subfolder.\n3. Type `cd name-of-your-folder` to navigate to that folder.\n4. Type `challenge.txt` to create a new text file.\n5. Type `ls` to check whether you created the file correctly.\n\n## Evaluation\n\nWhat does the <kbd>up arrow</kbd> command do?\n\n<Quiz>\n- It quits the Terminal/GitBash.\n- It undoes my last command.\n- It inserts my last command.*\n- It shows me what folder I am working in.\n</Quiz>\n\n# Creating a Cheat Sheet\n\nIn this section, we'll create a text file that we can use as a cheat sheet. You can use it to keep track of all the awesome commands you're learning.\n\n## `Echo`\n\nInstead of creating an empty file like we did with `touch`, let's try creating a file with some text in it. But first, let's learn a new command: `echo`.\n\n```console\n$ echo \"Hello from the command line\"\nHello from the command line\n```\n\n## Redirect (`>`)\n\nBy default, the echo command just prints out the text we give it. Let's use it to create a file with some text in it:\n\n```console\n$ echo \"This is my cheat sheet\" > cheat-sheet.txt\n```\n\nNow let's check the contents of the directory:\n\n```console\n$ pwd\n/Users/your-username/projects\n$ ls\ncheat-sheet.txt\n```\n\nOK, so the file has been created. But what was the `>` in the command we used? On the command line, a `>` is known as a \"redirect.\" It takes the output of a command and puts it in a file. Be careful, since it's possible to overwrite files with the `>` command.\n\nIf you want to add text to a file but _not_ overwrite it, you can use the `>>` command, known as the redirect and append command, instead. If there's already a file with text in it, this command can add text to the file _without_ destroying and recreating it.\n\n## `Cat`\n\nLet's check if there's any text in `cheat-sheet.txt`.\n\n```console\n$ cat cheat-sheet.txt\nThis is my cheat sheet\n```\n\nAs you can see, the `cat` command prints the contents of a file to the screen. `cat` stands for \"concatenate,\" because it can link strings of characters or files together from end to end.\n\n## A Note on File Naming\n\nYour cheat sheet is titled `cheat-sheet.txt` instead of `cheat sheet.txt` for a reason. Can you guess why?\n\nTry to make a file titled `cheat sheet.txt` and observe what happens.\n\nNow imagine you're attempting to open a very important data file using the command line that is titled `cheat sheet.txt`\n\nFor your digital best practices, we recommend making sure that file names contain no spaces—you can use creative capitalization, dashes, or underscores instead. Just keep in mind that the macOS and Unix file systems are usually pre-configured as cAsE-pReSeRvInG, which means that capitalization matters when you type commands to navigate between or do things to directories and files. You may also want to avoid using periods in your file names, as they sometimes can prompt you to confuse them with system files or file extensions (e.g., the full name of a PDF file is usually `file.pdf`).\n\n## Using a Text Editor\n\nThe challenge for this section will be using a text editor, specifically Visual Studio Code ([install guide here](https://github.com/DHRI-Curriculum/install/blob/v2.0/guides/visual-studio-code.md)), to add some of the commands that we've learned to the newly created cheat sheet. Text editors are programs that allow you to edit plain text files, such as `.txt`, `.py` (Python scripts), and `.csv` (comma-separated values, also known as spreadsheet files). Remember not to use programs such as Microsoft Word to edit text files, since they add invisible characters that can cause problems.\n\n## Challenge\n\nYou _could_ use the GUI to open your Visual Studio Code text editor—from your programs menu, via Finder or Applications or Launchpad in macOS, or via the Windows button in Windows—and then click `File` and then `Open` from the drop-down menu and navigate to your Desktop folder and click to open the `cheat-sheet.txt` file.\n\n_Or_, you can open that specific `cheat-sheet.txt` file in the Visual Studio Code text editor directly from the command line! Let's try that by using the `code` command followed by the name of your file in the command line. (Please note the command `code` prompts your computer to open Visual Code only if you have correctly completed [the software configuration](https://github.com/DHRI-Curriculum/install/blob/v2.0/guides/visual-studio-code.md) during installation.)\n\nOnce you've got your cheat sheet open in the Visual Studio Code text editor, type to add the commands we've learned so far to the file. Include descriptions about what each command does. Remember, this cheat sheet is for you. Write descriptions that make sense to you or take notes about questions.\n\nSave the file.\n\nOnce you're done, check the contents of the file on the command line with the `cat` command followed by the name of your file.\n\n## Solution\n\n- Step 1\n    ```console\n    $ code cheat-sheet.txt\n    ```\n\n- Step 2\n    ```console\n    $ cat cheat-sheet.txt\n    My Institute Cheat Sheet\n\n    ls\n    lists files and folders in a directory\n\n    cd ~\n    change directory to home folder\n\n    ...\n    ```\n\n## Evaluation\n\nWhat does effect does the following command produce? (select one)\n```console\n$ echo \"Hello! My Name is Mark!\" > introduction.txt\n```\n\n<Quiz>\n- It adds the line \"Hello! My Name is Mark!\" to the existing content of the `introduction.txt` file.\n- It checks whether the content of the `introduction.txt` file contains the line \"Hello! My Name is Mark!\"\n- It replaces the content of the `introduction.txt` file with the line \"Hello! My Name is Mark!\"*\n- None of the above.\n</Quiz>\n\n# Pipes\n\nSo far, you've learned a number of commands and one special symbol, the `>` or redirect. Now we're going to learn another, the `|` or \"pipe.\"\n\nPipes let you take the output of one command and use it as the input for another.\n\n![Pipes diagram](/images/command-line/pipes.png)\n\nLet's start with a simple example:\n\n```console\n$ echo \"Hello from the command line\" | wc -w\n5\n```\n![Pipes diagram](/images/command-line/example_pipes.png)\n\nIn this example, we take the output of the `echo` command (\"Hello from the command line\") and pipe it to the `wc` or word count command, adding a flag `-w` for number of words. The result is the number of words in the text that we entered. Flags marked with hyphens, such as `-l` or `-m`, indicate options which belong to specific commands.\n\nLet's try another. What if we wanted to put the commands in our cheat sheet in alphabetical order?\n\nUse `pwd` and `cd` to make sure you're in the folder with your cheat sheet. Then try:\n\n```console\n$ cat cheat-sheet.txt | sort\n```\n\nYou should see the contents of the cheat sheet file with each line rearranged in alphabetical order. If you wanted to save this output, you could use a `>` to print the output to a file, like this:\n\n```console\n$ cat cheat-sheet.txt | sort > new-cheat-sheet.txt\n```\n\n## Evaluation\n\nWhat do pipes allow you to do? (select all that apply)\n\n<Quiz>\n- Pipes let you take the output of one command and use it as the input for another.*\n- Pipes allow you to combine multiple commands in a single line.*\n- Pipes let you work on multiple files at the same time.\n</Quiz>\n\n# Exploring Text Data\n\nSo far the only text file we've been working with is our cheat sheet. Now, this is where the command line can be a very powerful tool: let's try working with a large text file, one that would be too large to work with by hand.\n\nLet's download the data we're going to work with:\n\n[Download `nypl_items.csv`](https://github.com/DHRI-Curriculum/command-line/raw/v2.0/files/nypl_items.csv)\n\nIf you are using Chrome or Firefox, right click on the link above and select \"Save Link As...\"; make sure you name the file `nypl_items.csv`\nPlease note that, occasionally, [Chrome \"forgets\" to add the extension to your downloaded file](/images/command-line/savelinkaschrome.png); therefore, if your filename doesn't end with `.csv`, [feel free to add it manually](/images/command-line/savelinkaschrome2.png).\n\nOur data set is a list of public domain items from the New York Public Library. It's in `.csv` format, which is a plain text spreadsheet format. CSV stands for \"comma separated values,\" and each field in the spreadsheet is separated with a comma. It's all still plain text, though, so we can manipulate the data using the command line.\n\n## Move Command\n\nOnce the file is downloaded, move it from your `Downloads` folder to the `projects` folder on your desktop—either through the command line, or drag and drop in the GUI. Since this is indeed a command line workshop, you should try the former!\n\nTo move this file using the command line, you first need to navigate to your `Downloads` folder where that file is saved. Then type the `mv` command followed by the name of the file you want to move and then the file path to your `projects` folder on your desktop, which is where you want to move that file to (note that `~` refers to your home folder):\n\n```console\n$ mv nypl_items.csv ~/Desktop/projects/\n```\n\nYou can then navigate to that `projects` folder and use the `ls` command to check that the file is now there.\n\n## Viewing Data in the Command Line\n\nTry using `cat` to look at the data. You'll find it all goes by too fast to get any sense of it. (You can click <kbd>control</kbd> + <kbd>c</kbd> on your keyboard to cancel the output if it's taking too long.)\n\nInstead, let's use another tool, the `less` command, to get the data one page at a time:\n\n```console\n$ less nypl_items.csv\n...\n```\n\n`less` gives you a paginated view of the data; it will show you contents of a file or the output from a command or string of commands, page by page.\n\nTo view the file contents page by page, you may use the following keyboard shortcuts (that should work on Windows using Git Bash or on macOS terminal):\n\nClick the <kbd>f</kbd> key to view forward one page, or the <kbd>b</kbd> key to view back one page.\n\nOnce you're done, click the <kbd>q</kbd> key to return to the command line.\n\nLet's try two more commands for viewing the contents of a file:\n\n```console\n$ head nypl_items.csv\n...\n\n$ tail nypl_items.csv\n...\n```\n\nThese commands print out the very first (the \"head\") and very last (the \"tail\") sections of the file, respectively.\n\n## Cleaning the Data\n\nWe didn't tell you this before, but there are duplicate lines in our data! Two, to be exact. Before we try removing them, let's see how many entries are in our `.csv` file:\n\n```console\n$ cat nypl_items.csv | wc -l\n100001\n```\n\nThis tells us there are 100,001 lines in our file. The `wc` tool stands for \"word count,\" but it can also count characters and lines in a file. We tell `wc` to count lines by using the `-l` flag. If we wanted to count characters, we could use `wc -m`.\n\nTo find and remove duplicate lines, we can use the `uniq` command. Let's try it out:\n\n```console\n$ cat nypl_items.csv | uniq | wc -l\n99999\n```\n\nOK, the count went down by two because the `uniq` command removed the duplicate lines. But which lines were duplicated?\n\n```console\n$ cat nypl_items.csv | uniq -d\n...\n```\n\nThe `uniq` command with the `-d` flag prints out the lines that have duplicates.\n\n## Challenge\n\nUse the commands you've learned so far to create a new version of the `nypl_items.csv` file with the duplicated lines removed. (Hint: _redirects_ from the lesson when we made a [cheat sheet](https://curriculum.dhinstitutes.org/workshops/command-line/lessons/?page=8) are your friend.)\n\n## Solution\n\nType `pwd` to see where on your computer you are located. If you are not in the `projects` folder we just created, navigate to that folder using the commands you learned in the [lesson on navigation](https://curriculum.dhinstitutes.org/workshops/command-line/lessons/?page=6).\n\nType `ls` to check whether the file `nypl_items.csv` is in your projects folder.\n\nType `cat nypl_items.csv | uniq > new_nypl_items.csv` to create a new version of the `nypl_items.csv` file with the duplicated lines removed.\n\n## Evaluation\n\nWhat do command line flags allow you to do? (select one)\n\n<Quiz>\n- Flags allow you to earmark the file you are working on.\n- Flags are useful to create a new version of the file you are working on, while preserving the old version for future access.\n- Flags are a common way to specify options for command line programs.*\n</Quiz>\n\n## Keywords\n\nDo you remember the glossary terms from this section?\n\n- [Path](https://github.com/DHRI-Curriculum/glossary/blob/v2.0/terms/path.md)\n\n# Interlude\n\n## A Favorite Command Line Feature: Tab Completion\n\nWhen you are navigating in the command line, typing folder and file names can seem to go against the promise of easier communication with your computer. Here comes _tab completion_, stage right!\n\nWhen you need to type out a file or folder name—for example, the name of that csv file we've been working with: `nypl_items.csv`—in the command line and want to move more quickly, you can just type out the beginning characters of that file name up until it's distinct in that folder and then click the <kbd>tab</kbd> key. And voilà! Clicking that <kbd>tab</kbd> key will complete the rest of that name for you, and it only works if that file or folder already exists within your working directory.\n\nIn other words, anytime in the command line you can type as much of the file or folder name that is unique within that directory, and <kbd>tab</kbd> complete the rest!\n\n## Clearing Text\n\nIf all the text remaining in your terminal window is starting to overwhelm you, you have some options. You may type the `clear` command into the command line, or click the <kbd>command (⌘)</kbd> and <kbd>k</kbd> keys to clear the scrollback. Pressing the <kbd>command (⌘)</kbd> and <kbd>l</kbd> keys in macOS, or <kbd>control</kbd> and <kbd>l</kbd> in Windows will clear the output from your most recent command.\n\n# Searching Text Data\n\nSo we've cleaned our data set, but how do we find entries that use a particular term?\n\nLet's say I want to find all the entries in our data set that use the term \"Paris.\"\n\nHere we can use the `grep` command. `grep` stands for \"global regular expression print.\" The `grep` command processes text line by line and prints any lines which match a specified pattern. Regular expressions are special strings representing a pattern to be matched in a search operation. `grep` gives us access to the power of regular expressions as we search for text.\n\n```console\n$ cat nypl_items.csv | grep -i \"paris\"\n...\n```\n\nThis will print out all the lines that contain the word \"Paris.\" (The `-i` flag makes the command ignore capitalization.) Let's use our `wc -l` command to see how many lines that is:\n\n```console\n$ cat nypl_items.csv | grep -i \"paris\" | wc -l\n191\n```\n\nHere we have asked `cat` to read `nypl_items.csv`, take the output and pipe it into the `grep -i` command, which will ignore capitalization and find all instances of the word `paris`. We then take the output of that `grep` command and pipe it into the word count `wc` command with the `-l` lines option. The pipeline returns `191` letting us know that \"Paris\" (or \"paris\") occurs on 191 lines of our data set.\n\n## Challenge\n\nUse the `grep` command to explore our `.csv` file a bit. What areas are best covered by the data set?\n\n## Solution\nIf you want to get a little more milage out of the `grep` command, refer to [this tutorial on grep and regular expressions](https://www.digitalocean.com/community/tutorials/using-grep-regular-expressions-to-search-for-text-patterns-in-linux). Regular expressions (or regex) provide methods to search for text in more advanced ways, including specific wildcards, matching ranges of characters such as letters and numbers, and detecting features such as the beginning and end of lines. If you want to experiment with regular expressions in an easy-to-use environment, numerous regex test interfaces are available from [a simple google search](https://www.google.com/search?w&q=regex+tester), such as [RegExr](https://regexr.com/), which includes a handy cheat sheet.\n\n## Evaluation\n\nLet's think about the `grep` command. Select all that pertain to the command.\n\n<Quiz>\n- It searches the given file for lines containing a match to the given strings or words.*\n- It can be combined with other commands, so as to produce a search that matches their output.*\n- It produces a new file with the lines containing the strings or words you are searching.\n- It delete the strings or words you are searching from a file.\n</Quiz>\n\n# What We Have Learned\n\nNow is a good time to do a quick review!\n\nIn this session, we learned:\n\n- how to use `touch` and `echo` to create files\n- how to use `mkdir` to create folders\n- how to navigate our file structure by `cd`(change directory), `pwd` (print working directory), and `ls` (list)\n- how to use redirects (`>`) and pipes (`|`) to create a pipeline\n- how to explore a comma separated values (`.csv`) dataset using word and line counts, `head` and `tail`, and the concatenate command `cat`\n- how to search text files using the `grep` command\n\nAnd we made a [cheat sheet](https://curriculum.dhinstitutes.org/workshops/command-line/lessons/?page=8) for reference!\n\nWhen we started, we reviewed what text is—whether plain or enriched. We learned that text editors that don't fix formatting of font, color, and size, do allow for more flexible manipulation and multi-program use. If text is allowed to be a string of characters (and not specific characters chosen for their compliance with a designer's intention), that text can be fed through programs and altered with automated regularity. Text editors are different software than Bash (or Terminal), which is a text-based shell that allows you to interact directly with your operating system giving direct input and receiving output.\n\n# Theory to Practice\n\nYou've made it through your introduction to the command line! By now, you have experienced some of the power of communicating with your computer using text commands. The basic steps you learned today will help as you'll further your digital skills. For example, you might work with the command line interface to set up your [version control with git](https://github.com/DHRI-Curriculum/git) or you'll have your text editor open while [writing python scripts](https://github.com/DHRI-Curriculum/python) or building basic websites with [HTML and CSS](https://github.com/DHRI-Curriculum/html-css). Having a grasp of command line basics will not only make you more familiar with how your computer and basic programming work, but it will also give you access to tools and communities that will expand your research.\n\n## Review your knowledge: 7 questions from the lessons\n\n__1. What does the <kbd>up</kbd> arrow command do? (Select one of the following)__\n\n<Quiz>\n- It inserts my last command.*\n- It quits the Terminal/GitBash.\n- It undoes my last command.\n- It shows me what folder I am working in.\n</Quiz>\n\nRevisit lesson [Creating Files and Folders](/workshops/command-line/?page=9) to learn more.\n\n__2. What do command line flags allow you to do? (Select one of the following)__\n\n<Quiz>\n- Flags are a common way to specify options for command line programs.*\n- Flags allow you to earmark the file you are working on.\n- Flags are useful to create a new version of the file you are working on, while preserving the old version for future access.\n</Quiz>\n\nRevisit lesson [Exploring Text Data](/workshops/command-line/?page=12) to learn more.\n\n__3. What effect does the following command produce?__\n\n```console\n$ echo \"Hello! My Name is Mark!\" > introduction.txt\n```\n\n(Select one of the following)\n\n<Quiz>\n- It replaces the content of the introduction.txt file with the line “Hello! My Name is Mark!”*\n- It adds the line “Hello! My Name is Mark!” to the existing content of the introduction.txt file.\n- It checks whether the content of the introduction.txt file contains the line “Hello! My Name is Mark!”\n- None of the above.\n</Quiz>\n\nRevisit lesson [Creating a Cheat Sheet](/workshops/command-line/?page=10) to learn more.\n\n__4. What do pipes allow you to do? (Select all that apply)__\n\n<Quiz>\n- Pipes let you take the output of one command and use it as the input for another.*\n- Pipes allow you to combine multiple commands in a single line.*\n- Pipes let you work on multiple files at the same time.\n</Quiz>\n\nRevisit lesson [Pipes](/workshops/command-line/?page=11) to learn more.\n\n__5. What command do you run if you are trying to identify where in the filesystem you are currently located/working? (Select all that apply)__\n\n<Quiz>\n- `$ pwd`*\n- `$ ls`\n- `$ cd`\n- `$ whoami`\n</Quiz>\n\nRevisit lesson [Navigation](/workshops/command-line/?page=8) to learn more.\n\n__6. Let's think about the `grep` command. Select all that pertain to the command.__\n\n<Quiz>\n- It searches the given file for lines containing a match to the given strings or words.*\n- It can be combined with other commands, so as to produce a search that matches their output.*\n- It produces a new file with the lines containing the strings or words you are searching.\n- It delete the strings or words you are searching from a file.\n</Quiz>\n\nRevisit lesson [Searching Text Data](/workshops/command-line/?page=14) to learn more.\n\n__7. What is the difference between a plain text document and a rich text document? (Select all that apply)__\n\n<Quiz>\n- Plain text contains no formatting, only line breaks and spacing.*\n- Rich text is styled text, i.e., plain text completed by information such as font size, format, and colors.*\n- Plain text cannot be marked up.\n- One can’t determine whether there is a difference between the two without looking at their content.\n</Quiz>\n\nRevisit lesson [Text Editors](/workshops/command-line/?page=4) to learn more.\n\n## Suggested Further Readings\n\n- Are you wondering how (else) the command line can be deployed for your scholarship? [Dennis Tenen and Grant Wythoff's \"Sustainable Authorship in Plain Text using Pandoc and Markdown\"](https://programminghistorian.org/en/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown) have some answers for you.\n- [Stephen Ramsay](https://www.unl.edu/english/stephen-ramsay) is a scholar that has thought at length about the way the command line is (or can be!) embedded in a researcher's praxis. If you're interested in reading his work, here are two of his finest essays: [\"Life on the Command Line\"](https://files.zotero.net/eyJleHBpcmVzIjoxNTkyNjY1MDk3LCJoYXNoIjoiODFkNDJmZmU1ZjU3YzRmMDE2YTQ1ZmQwY2YzOTUwYmIiLCJjb250ZW50VHlwZSI6InRleHRcL2h0bWwiLCJjaGFyc2V0IjoidXRmLTgiLCJ6aXAiOjF9/07826342b83ea870f846cfa48f1b0eb8d3d51b78ceb1b05b1e014467d7241904/life-on-the-command-line.html) and [\"Programming with Humanists: Reflections on Raising an Army of Hacker-Scholars in the Digital Humanities\"](https://www.openbookpublishers.com/htmlreader/DHP/chap09.html)\n\n## Other Tutorials\n\n- [*Data Science at the Command Line*](https://www.datascienceatthecommandline.com/) is an open access e-book by Jeroen Janssens, a hands-on guide that can help you become a more efficient and productive data scientist through the use of the command line.\n- [BashGuide](http://mywiki.wooledge.org/BashGuide) offers some good practice techniques for taking your BASH skills to a higher level by teaching you write some simple scripts.\n\n## Projects or Challenges to Try\n\n- [More command line challenges](https://github.com/DHRI-Curriculum/command-line/blob/main/sections/15-challenges.md) devised by the GCDI team are available here.\n- When working with digital tools, it's usually a good idea to familiarize with their documentation. Here's the [Bash Reference Manual](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html), where you can find Bash features for beginners and advanced users.\n- [Pandoc](https://programminghistorian.org/en/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown) is an online software that allows users to convert file types through the command-line (from markdown to PDF, for example).\n- [youtube-dl](https://ytdl-org.github.io/youtube-dl/index.html) is a command-line exercise to download videos from YouTube.com. It requires the Python interpreter.\n- Feeling super brave? You might want to give [MALLET (MAchine Learning for LanguagE Toolkit)](http://mallet.cs.umass.edu/) a shot! MALLET is a \"a Java-based package for statistical natural language processing, document classification, clustering, topic modeling, information extraction, and other machine learning applications to text.\" It includes tools for document classification, sequence tagging, topic modeling, and numerical optimization.\n\n## Discussion Questions\n\n- What are some of the operations that using the command line, as opposed as your GUI, allows you to perform?\n- What has learning to use the command line taught you about your machine?","title":"Command Line Workshop","description":"If asked to show someone who has never seen a computer how to do something on your computer, many of us would explain what a screen and a cursor are, and then show how to point and click on icons. This approach relies on a graphical user interface, or GUI (pronounced “gooey!”). Today we’re going to explore another way to make your computer do things: through the command line. Instead of pointing and clicking, we’ll be typing in either git bash (Windows) or terminal (macOS) to tell the computer directly what task we’d like it to perform.","cover_image":"/images/workshops/img2.jpg","learning objectives":[{"description":"The goals of this workshop are to:"},"Learn common commands to create files (`touch` and `echo`)","Learn commands to create directories (`mkdir`)","Navigate our file structure using change directory (`cd`), print working directory (`pwd`), and list (`ls`)","Move content from one place to another using redirects (`>`) and pipes (`|`)","Explore a comma separated values (.csv) dataset using word and line counts, `head` and `tail`, and the concatenate command `cat`","Search text files using the `grep` command","Create and sort cheat sheets for the commands we learn"],"estimated time":{"description":"3 hours"},"dependencies":{"workshop prerequisites":{"visual-studio-code":{"description":"(Recommended) You can use any plain text editor, but for our purposes Visual Studio Code (\"VS Code\") will be used."},"gitguide":{"description":"(Required) If you're using Windows, you will need to follow the instructions to install so that we can work in the cross-platform Unix command line for this session. If you're using macOS, however, you do not need to take any action. The built-in Terminal application has all the functionality we need."}}},"readings":["See [Julia Evans's Bite Size Command Line here](https://jvns.ca/blog/2018/08/05/new-zine--bite-size-command-line/) (recommended). Julia Evans's comics explain in detail (while being fun!) some of the most central Unix command line tools. It's a great zine to have on your desk next to you for this workshop, and long after.","Basic UNIX commands [can be found here](http://mally.stanford.edu/~sr/computing/basic-unix.html) (recommended). This is another list of commonly used commands in the command line. It's useful, but can be a little overwhelming if you don't have any exposure to these things beforehand. Don't worry, we will cover the most important ones in our Introduction to Command Line workshop!","Neal Stephenson's [\"In the Beginning... Was the Command Line\"](http://cristal.inria.fr/~weis/info/commandline.html) is a useful piece to grasp the relationship between (and the affordances of) the command line and the GUI.","Douglas Rushkoff's [*Program or Be Programmed*](https://rushkoff.com/books/program-or-be-programmed/) offers some reflections on how using the command line allows one to communicate in a less mediated way with their machines and the importance of doing so in the current technoscape."],"projects":[{"description":"Mastering the command line will prove useful in a great number of projects. Most Python- and R-based projects will require you to have some knowledge of the command line. At a very basic level, you will be invoking a Python script and will be using values of command line arguments when creating and running your scripts."},"The command line is useful for setting up installations of server-side software (or more advanced software-as-a-service software, sometimes acronymized as SaaS). [Omeka](http://www.omeka.org) is merely one example. The command line will allow you to navigate the file structure of your server. Commands like `ls`, `mkdir`, `rmdir`, `cd`, etc. are really important. For example, `grep` could help you find a plugin directory that you might have accidentally placed in the wrong location.","[Fair World 64: A Text-Based Game of the 1964–1965 World's Fair](https://academicworks.cuny.edu/gc_etds/3786/) A recent digital capstone project by Christofer Gass runs a Python script on the command line.","[Awesome Bash](https://github.com/awesome-lists/awesome-bash) - a curated list of useful Bash scripts and resources."],"ethical considerations":["'The command line' is laden with masculine and military metaphors, which is reflective of the history of computing and programming. As Wendy Hui Kyong Chun discusses in [On Software, or the Persistence of Visual Knowledge (2004)](https://doi.org/10.1162/1526381043320741), almost all computers (as in human computers) in the US during World War II were young women. Human computers received commands from analysts—predominantly men with the military—that they then had to interpret and act upon the machine. As Chun (p. 34) argued, 'computation depends on 'yes, sir' in response to short declarative sentences and imperatives that are in essence commands ... The command line is a mere operating system (OS) simulation.' If commands are the ways in which a user communicates with machines, the command line (of computers today) receives these commands as text that is typed in."]},"glossary":{"REPL":{"REPL":"# REPL\n\nREPL stands for Read, Eval, Print, Loop. It is also known as the Python Interpreter or Interactive Shell, and it refers to a Python environment that processes your code as soon as you press enter. First, it **Reads** your code, then **Evaluates** what you wrote, then **Prints** the result (if there is a result), and finally **Loops** back to the initial prompt, allowing the user to start the loop again. \n\nThe REPL is useful for testing code on the fly, seeing if it works or what will happen. Since the REPL doesn't save your data after each session, though, you need a text editor to write and save longer scripts. Think of the REPL as a sandbox or playpen for exploring Python commands and expressions in the moment. \n\nTo use the REPL, just type `python` into your interpreter. You'll know you're there when you see the three `>>>`. To get out of the REPL, press `control-d` or type `quit()`. \n\n# Tutorial\n\nSee this beginner's tutorial on the [REPL](https://pythonprogramminglanguage.com/repl/) from Learn Python.\n\n# Readings\n\nCheck out this intermediate article on the [REPL](https://codewith.mu/en/tutorials/1.0/repl) and what it can do on Code With Mu.\n","slug":"REPL"},"Accessibility":{"Accessibility":"# Accessibility\n\nAccessibility is \"the quality or condition of being accessible (in various senses),\" and \"access\" refers to \"to obtain, acquire; to get hold of\" or \"to gain admission to\" (source: Oxford English Dictionary online). \"Accessibility\" in design speak often refers to design for people with disabilities (see [Shawn Lawton Henry, et al. 2014](https://dl.acm.org/citation.cfm?doid=2596695.2596719)). This workshop employs the term \"accessibility\" to refer to access to those folks as well as to people in different international contexts and/or who speak different languages, and to methods of open or non-proprietary design and sharing.\n","slug":"accessibility"},"Anaconda":{"Anaconda":"# Anaconda\n\nAnaconda is a distribution for Python (and other languages) with tools for data analysis.\n\n## Readings\n\n- [Anaconda Documentation](https://docs.anaconda.com/anaconda/)","slug":"anaconda"},"append":{"append":"# append\n\n`append()` is a method that adds an element to the end of a list. \n\n# Readings\n\nRead more about [append()](https://www.w3schools.com/python/ref_list_append.asp) at w3schools.\n","slug":"append"},"Attribute Table":{"Attribute Table":"# Attribute Table\n\nAn *attribute* is a characteristic of a feature. Attributes can contain data of different types: strings (text), numerical values, dates, or booleans. Each column in the *Attribute Table* represents a different attribute.\n","slug":"attribute-table"},"Attributes":{"Attributes":"# Attributes\n\nAttributes offer secondary information about an element in HTML. Each attribute is nestled within the element tag. For example, the HTML command `<a href=\"https://www.dhinstitutes.org/\">Digital Humanities Research Institute</a>` contains a link to the Digital Humanities Research Institute website. Here, the `a` element denotes a hyperlink and the `href` denote an attribute that specifies the hyperlink's destination.","slug":"attributes"},"Attribute type ":{"Attribute type ":"# Attribute type \n\nAttributes can be stored as different data types, including strings (text), integer, double, dates, and booleans.\n","slug":"attributetype"},"The Belmont Repor":{"The Belmont Repor":"# The Belmont Repor\n\nPublished by the National Commission for the Protection of Human Subjects of Biomedical and Behavioral Research in 1979, the Belmont Report \"\"identifies basic ethical principles and guidelines that address ethical issues arising from the conduct of research with human subjects\" (source: [HHS.gov](https://www.hhs.gov/ohrp/regulations-and-policy/belmont-report/index.html).\n","slug":"belmont-report"},"Beneficence":{"Beneficence":"# Beneficence\n\nBeneficence is a core principe in *the Belmont Report* that stipulates that researchers should \"(1) do not harm and (2) maximize possible benefits and minimize possible harms.\" A key concern when applying this principle is an *assessment of risks and benefits* (source: [The Belmont Report](https://www.hhs.gov/ohrp/regulations-and-policy/belmont-report/index.html#xbasic).\n","slug":"beneficence"},"Big data":{"Big data":"# Big data\n\n\"Big data\" generally refers to digital projects that deal with very large datasets from which different kinds of patterns or analyses are computed. Oftentimes big data researchers do not obtain the informed consent of each person represented by or linked to the obtained data. This can be an ethical concern, given that \"even seemingly innocuous and anonymized data have produced unanticipated ethical questions and detrimental impacts\" (source: [Matthew Zook, et al. 2017](http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005399)).   \n","slug":"big-data"},"Boolean":{"Boolean":"# Boolean\n\nA data type in Python that is either \"True\" or \"False\" and is often used as a basic building block for logical operations. They are implied in conditional statements (which check if expressions are true in order to run a bit of code) and can be retruend by functions. \n\n# Readings \n\n- Read more about [Booleans and logical operators](https://thomas-cokelaer.info/tutorials/python/boolean.html) here. \n\n# Tutorials\n\n- Check out w3school's tutorial on using [Booleans](https://www.w3schools.com/python/python_booleans.asp). \n","slug":"boolean"},"branch":{"branch":"# branch\n\nBranches are not used in the Git session in this curriculum, but are a frequently used feature of Git. A branch is an alternative timeline of commits, usually used to add a new feature or some other substantive change to a repository. Once the feature or change is complete, the branch can be reintegrated with the main timeline, which is usually called \"master.\" The process of reintegration is referred to as \"merging\".\n\n## Readings\n\n- [\"Git Branching - Branches in a Nutshell\"](https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell), in Scott Chacon and Ben Straub, _Pro Git_, 2nd edition (Apress, 2014)\n\n## Tutorials\n\n- [\"Git Branching - Basic Branching and Merging\"](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging), _git-scm.com_\n","slug":"branch"},"Category":{"Category":"# Category\n\nA category is \"a term (meaning literally ‘predication’ or ‘assertion’) given to certain general classes of terms, things, or notions\" (source: Oxford English Dictionary online). The construction and reproduction of categories—through e.g. library subject headings, tags on websites, categorization methods informing algorithms, and spatial divisions on a map—are an important ethical consideration when doing digital research or a digital project.\n","slug":"category"},"Class":{"Class":"# Class\n\nClass is an attribute used in HTML and CSS to select and access specific elements. Class is especially useful in applying standard styling to repeating elements across a website. This helps create a consistent look to a website.","slug":"class"},"Cloning":{"Cloning":"# Cloning\n\nCloning a repository means making a copy of a repository on GitHub, to download and work on locally--on your local machine. \n\nCloning can be especially useful when you're joining a group project that is hosted on GitHub, and you want your changes to eventually be pushed and shared with that same repository. \n\nCloning can also be used in conjunction with forking. For example, you could fork the GitHub repository of this lesson to your GitHub account, and then clone or download the repository to make edits and admendations. Then you would push those changes to a repository under your GtiHub account. Git and GitHub work to make sure attribution of contributions and lineage are transparent. \n\n## Tutorials\n\n- [Cloning a repository from GitHub](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository-from-github)","slug":"cloning"},"Color ramp":{"Color ramp":"# Color ramp\n\nprovides a range of color to the features of a map layer based on an attribute from the layer. \n","slug":"colorramp"},"Command Line":{"Command Line":"# Command Line\n\nThe command line is a text-based way of interacting with your computer. Another way of looking at it is that the command line is a program that accepts commands as text input and converts them into appropriate operating system functions.\n\nThere are other words that can be used synonymously with \"command line.\" Here are some of them:\n- _bash_ - the programming language used in the command line. (Yes, we tricked you, you're already programming!) Short for \"Born Again SHell,\" for reasons people on the internet will happily tell you about.\n- _the terminal_ - Particularly used to refer to the command line on macOS. This term made more sense when universities used mainframes and every computer was only a terminal.\n- _the shell_ - The part of an operating system that interacts with a human. Technically, anything you do in a graphical interface is also in a shell, but in practice this is just another synonym for the command line.\n- _cli_ - \"command-line interface,\" this is a super technical term for the command line used to impress everyone around you.\n","slug":"command-line"},"Commit":{"Commit":"# Commit\n\nWhen you commit your changes using Git, you are created a version a file that can be referenced even after further changes to the file are made and committed. \n\nMaking a commit involves 2 steps. \n- First, you need to stage  the files, or tell Git, which files it should pay attention to. Where are your changes? You use the command `git add` to point to them. \n- Second, you create the version by committing the changes. You use the command `git commit` to take the snapshot and add a label (the -m flag) that can help you in returning to that version in the future.\n\nMaking a commit is a lot like taking a photo. First, you have to decide who will be in the photo and arrange your friends or family in front of the camera (the staging process). Once everyone is present and ready, you take the picture, entering that moment into the permanent record (the commit process).\n\nBefore any of this can happen, you must initialize the Git folder, or put it on Git's radar. This only needs to happen one time to a folder.","slug":"commit"},"Concordance":{"Concordance":"# Concordance\n\nNltk function that allows to see the characters on both sides of the word; an easy way to investigate the context of a certain word across a corpus.","slug":"concordance"},"Consent":{"Consent":"# Consent\n\nTo provide consent is to actively provide permission or agree to something. The more specific term *\"informed consent\"* is used to emphasize that in order to provide such permission, a person must be provided clear and correct information (not deception), and be able to comprehend such information. In the context of a research study, per *The Belmont Report* guidelines, a person must also be informed of their right to volunteer or not to participate in the study, and of their right to withdraw from the study at any point. Ideally, consent would also be enthusiastically given (see [The Belmont Report](belmont.md) page; also see [this image](https://github.com/DHRI-Curriculum/ethics/blob/master/images/consent_pp.png) from Planned Parenthood that reads \"CONSENT: I [heart] FRIES: Freely given, Reversible, Informed, Enthusiastic, Specific.\"","slug":"consent"},"Corpus":{"Corpus":"# Corpus\n\nA collection of texts that are somehow related to each other. Plural: /corpora/","slug":"corpus"},"CSS":{"CSS":"# CSS\n\nCSS (Cascading Style Sheets) is usually used in conjunction with HTML. HTML tells the browser what the different parts of a document _are_. CSS tells the browser what the parts of the document should _look like_. It is essentially a set of rules that are applied when rendering an HTML document. Its name—Cascading Style Sheets—refers to the fact that there is an order of precedence in how the browswer applies CSS rules to a text. ","slug":"css"},"CSS Selectors":{"CSS Selectors":"# CSS Selectors\n\nCSS Selectors select HTML elements on which to apply particular styling rules. For example, in the following CSS rule set, the `h1` selector applies orange color and italics to all content in the `h1` element.\n\n```css\nh1 {\n    color: orange;\n    font-style: italic;\n}\n```\n","slug":"cssselectors"},"CSV (file format)":{"CSV (file format)":"# CSV (file format)\n\nCSV or Comma Separated Values uses---you guessed it!---commas to separate values. Each line (First Name, Last Name) is a new \"record\" and each column (separated by a comma) is a new \"field.\" This data format stores tabular data in a clean way that facilitates the transfer between different data architectures. As data types go, it is very rudimentary (even predating computers!) and is easy to type, without needing special characters beyond a comma.\n\n```\nFirst Name,Last Name\nSmally,McTiny\nKitty,Kitty\nFoots,Smith\nTiger,Jaws\n```","slug":"csv"},"Data":{"Data":"# Data\n\nThere are many different perspectives towards what counts as data. Some cites data as \"material or information\" for which \"an argument, theory, test or hypothesis, or another research output is based\" upon ([Queensland University of Technology](http://www.mopp.qut.edu.au/D/D_02_08.jsp)), while others critiques the understanding of data as \"mere descriptions ofa priori conditions\" ([Johanna Drucker](http://www.digitalhumanities.org/dhq/vol/5/1/000091/000091.html)). Data, in our case, are subjective (because of our interests and assumptions) and are materials and/or information necessary to come to our conclusion. \n\n## Readings\n\n- Johanna Drucker's [Humanities Approaches to Graphical Display](http://www.digitalhumanities.org/dhq/vol/5/1/000091/000091.html)\n- Matthew Salganik's [Readymade v. Custommade Data](https://www.bitbybitbook.com/en/1st-ed/introduction/themes/)\n- Catherine D'Ignazio and Lauren Klein's [The Numbers Don't Speak for Themselves](https://data-feminism.mitpress.mit.edu/)","slug":"data"},"Database":{"Database":"# Database\n\nA database is a collection of data that is structured to allow for manipulation.\n","slug":"database"},"Descriptive Analysis":{"Descriptive Analysis":"# Descriptive Analysis\n\nDescriptive analysis are techniques geared towards summarizing a data set, such as:\n\n- Mean\n- Median\n- Mode\n- Average\n- Standard deviation","slug":"descriptive-analysis"},"Dictionaries":{"Dictionaries":"# Dictionaries\n\nA collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values.","slug":"dictionaries"},"dir()":{"dir()":"# dir()\n\nThe `dir()` method returns a list of possible methods and attributes of an object, such as a variable or string. Useful for seeing what kinds of things you can do with that object. \n\n# Tutorials\n\n- Learn how to use [dir()](https://www.w3schools.com/python/ref_func_dir.asp) on w3schools.\n","slug":"dir"},"Discourse":{"Discourse":"# Discourse\n\nDiscourses, per Michel Foucault's theorization, are competing ideologies (or individualized groups of statements), constructed by people and institutions in power over time, that become dominant amongst societies of people. Discourses produce knowledge in mediums that a society perceives as normative and generally does not question; in doing so, discourses pervasively shape how the people in that society think, act, and react (see Michel Foucault, _The Archaeology of Knowledge and the Discourse on Language_, 1969).","slug":"discourse"},"\"The Distance Principle\"":{"\"The Distance Principle\"":"# \"The Distance Principle\"\n\nThe distance principle refers to \"the extent to which Internet texts or data sets might connect to persons [even when] the conceptual or experiential distance between the researcher and author/participant [does not appear to be] close\" (source:  [Annette Markam and Elizabeth Buchanon](https://www.academia.edu/8037870/Ethical_Concerns_in_Internet_Research).\n","slug":"distance-principle"},"Elements":{"Elements":"# Elements\n\nElements identify the different parts of a page, such as paragraphs, headings, titles, body text, images and more. Elements are demarcated by tags which enclose the content of an element (ex. `<head>` and `</head>` are tags that denote the head element of your page).","slug":"elements"},"Ethics":{"Ethics":"# Ethics\n\nEthics are the moral principles that an individual aims to follow in practice to the best of their ability, research, and foresight.\n","slug":"ethics"},"f-string":{"f-string":"# f-string\n\nAlso called “formatted string literals,” f-strings are ways of formating text so that expressions (like variables) can appear within strings. They have an f at the beginning and curly braces containing expressions that will be replaced with their values. \n\n# Readings\n\n- Read more about [f-strings](https://realpython.com/python-f-strings/#f-strings-a-new-and-improved-way-to-format-strings-in-python) on Real Python.\n\n# Tutorials\n\n- See [examples for using f-strings](https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/) on Geeks for Geeks.\n","slug":"f-string"},"Feature":{"Feature":"# Feature\n\nA feature is a visual element on a map. For vector data it's the points, lines and polygons. Each individual feature (each point, each line, and each polygon) is represented as a row in the attribute table. \n","slug":"feature"},"Filesystem\t":{"Filesystem\t":"# Filesystem\t\n\nA filesystem (or file system) is a set of methods and data structures that an operating system (e.g., Windows, MacOS, Linux, etc.) uses to  control how data is stored and retrieved on a disk (such as your computer’s hard drive, or even a USB pen drive). Some operating systems include support for more than one file system. ","slug":"filesystem"},"float":{"float":"# float\n\nA data type in Python that represents numbers with decimal points. \n\n# Readings\n\n- Read more about [floats](https://www.geeksforgeeks.org/python-float-type-and-its-methods/) on Geeks for Geeks.\n","slug":"float"},"for-loop":{"for-loop":"# for-loop\n\nA for-loop is a way of going through an entire sequence of items, like a list. A for-loop \"iterates\" over a sequence, which means it does something to each item in that sequence. With for-loops we can carry out a command for multiple items in a sequence. \n\n# Tutorials\n\n- Check out the [for-loop](https://www.w3schools.com/python/python_for_loops.asp) description on w3schools.\n","slug":"for_loop"},"Forking":{"Forking":"# Forking\n\nForking is a proper function of the GitHub platform. It supports collaboration by allowing you to copy someone else's repository to your own account on GitHub while maintaining a trail of attribution and derivation. \n\nOnce the files are forks, you can clone or download them, edit them, and share your changes on GitHub. Git and GitHub help track and be transparent about contributions or attribution. \n\n## Tutorials\n\n- [About Forking](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-forks). GitHub Writing.","slug":"forking"},"FTP":{"FTP":"# FTP\n\nFTP is a protocol used to share files from your computer (_a client_) to another computer called a server, and back again over the internet. ","slug":"ftp"},"Function":{"Function":"# Function\n\nFunctions are ways of doing things in Python. They take some input and do something with it, and can return a value. For example, a function can return the results of a calculation. If your function takes an argument, it will go inside the parentheses. \n\nFunctions are first defined then called to be executed. This allows you to first write the function but only call it (execute its code) when you need to in Python.\n\nExample: \n\n```python\ndef multiply(a, b):\n    result = a * b\n    return \n\nmultiply(2, 3)\n```\n\nThe first code block defines the function `multiply()` which takes `a` & `b` as arguments. The function sets `result` to the caluclation of `a` x `b`. It then returns the value of result. Finally, the function is called with arguments `2` & `3`, which will be substituted for `a` and `b` in the function definition. \n\n# Readings\n\n- More in-depth exploration of [functions](https://www.programiz.com/python-programming/function) on Programiz.\n\n# Tutorials\n\n- Simple walk-through of [functions](https://www.w3schools.com/python/python_functions.asp) on w3schools.\n","slug":"function"},"Geocoding":{"Geocoding":"# Geocoding\n\nis a spatial process that uses a *geographic address locator* to match addresses with location coordinates and create a point layer. It turns a text file (e.g. CSV) into a vector file (e.g. points layer).\n","slug":"geocoding"},"Git":{"Git":"# Git\n\nGit is software used for version control—that is, tracking the state of files and changes you make to them over time. Git can be enabled in a folder, and then used to save the state of the contents in that folder at different points in the future, as designated by you.\n\nGit is also useful for collaboration, as a repository can be shared across computers, and its contents can be asynchonously developed and eventually merged with the main project. \n\nIn this workshop, you'll use Git on your local machines to track changes you make to a file. \n\n## Readings\n\n- Perez-Riverol, Y. and colleagues. (2016) _[Ten Simple Rules for Taking Advantage of Git and GitHub](https://doi.org/10.1371/journal.pcbi.1004947)._ PLOS Computational Biology.\n- Chacon, S. and Straub, B. [Pro Git](https://git-scm.com/book/en/v2). Published by Apress.\n\n## Tutorials\n\n- [An intro to Git: What it is and how to use it](https://www.freecodecamp.org/news/what-is-git-and-how-to-use-it-c341b049ae61/)\n\n## Cheat sheets\n\n- [Atlassian's Git cheat sheet](https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet) is a great resource, handy to have next to your computer as you're learning how to use Git.\n","slug":"git"},"GitHub":{"GitHub":"# GitHub\n\nGitHub is a online platform for hosting Git repositories. It functions for some, predominantly programmers, as a social network for sharing and collaborating on code-based projects. Users can share their own projects, as well as search for others, which they can then often work on and contribute to.\n\nDigital Humanists, librarians, and other academics are also finding ways Git and GitHub are useful in writing projects and teaching. \n\nGitHub also serves as a web-hosting platform, allowing users to create websites from their repositories.\n\n## Readings\n\n- Pe-Than, E.P.P., Dabbish, L. and Herbsleb, J.D. (2019). [Collaborative Writing at Scale: A Case Study of Two Open-Text Projects Done on GitHub](https://ci.acm.org/2019/assets/proceedings/CI_2019_paper_65.pdf).Collective Intelligence.\n\n\n## Tutorials\n\n- [Getting Started with GitHub](https://help.github.com/en/github/getting-started-with-github)\n- Miyake, K. (2016). [Create Your (FREE) Website Using Github and Jekyll](https://digitalfellows.commons.gc.cuny.edu/2016/03/21/create-your-free-website-using-github-and-jekyll/). Tagging the Tower blog.\n- Visconti, A. (2016). [Building a static website with Jekyll and GitHub Pages](https://programminghistorian.org/en/lessons/building-static-sites-with-jekyll-github-pages). Programming Historian.","slug":"github"},"turns contents of all markdown files into yaml files":{"turns contents of all markdown files into yaml files":"# turns contents of all markdown files into yaml files\nimport os\nimport glob\nimport yaml\nimport re\n\nyaml_list = []\n# ingest files from this directory\npath = './'\nmarkdown_files = glob.glob(path + '*.md')\nfor markdown_file in markdown_files:\n    # read markdown file\n    with open(markdown_file, 'r') as f:\n        markdown_contents = f.read()\n        # grab h1\n        h1 = re.search('# (.*)', markdown_contents).group(1)\n        everything_else = re.sub('# (.*)', '', markdown_contents)\n        # convert to yaml\n        yaml_contents ={h1: everything_else}\n        print(yaml_contents)\n        # add yaml_contents to yaml_list\n        yaml_list.append(yaml_contents)\n\n# print (yaml_list)\n# turn yaml_list into a file called 'terms.yaml'\nwith open('glossary.yaml', 'w') as f:\n    # yaml.dump(yaml_list, f, default_flow_style=False, default_style=None)\n    yaml.safe_dump(yaml_list, f, indent=4, allow_unicode=False)\n","slug":"glossary.py"},"-   Accessibility: '":{"-   Accessibility: '":"-   Accessibility: '\n\n\n        Accessibility is \"the quality or condition of being accessible (in various\n        senses),\" and \"access\" refers to \"to obtain, acquire; to get hold of\" or \"to\n        gain admission to\" (source: Oxford English Dictionary online). \"Accessibility\"\n        in design speak often refers to design for people with disabilities (see [Shawn\n        Lawton Henry, et al. 2014](https://dl.acm.org/citation.cfm?doid=2596695.2596719)).\n        This workshop employs the term \"accessibility\" to refer to access to those\n        folks as well as to people in different international contexts and/or who\n        speak different languages, and to methods of open or non-proprietary design\n        and sharing.\n\n        '\n-   Anaconda: '\n\n\n        Anaconda is a distribution for Python (and other languages) with tools for\n        data analysis.\n\n\n        #\n\n\n        - [Anaconda Documentation](https://docs.anaconda.com/anaconda/)'\n-   append: \"\\n\\n`append()` is a method that adds an element to the end of a list.\\\n        \\ \\n\\n\\n\\nRead more about [append()](https://www.w3schools.com/python/ref_list_append.asp)\\\n        \\ at w3schools.\\n\"\n-   Attribute Table: '\n\n\n        An *attribute* is a characteristic of a feature. Attributes can contain data\n        of different types: strings (text), numerical values, dates, or booleans.\n        Each column in the *Attribute Table* represents a different attribute.\n\n        '\n-   Attributes: '\n\n\n        Attributes offer secondary information about an element in HTML. Each attribute\n        is nestled within the element tag. For example, the HTML command `<a href=\"https://www.dhinstitutes.org/\">Digital\n        Humanities Research Institute</a>` contains a link to the Digital Humanities\n        Research Institute website. Here, the `a` element denotes a hyperlink and\n        the `href` denote an attribute that specifies the hyperlink''s destination.'\n-   'Attribute type ': '\n\n\n        Attributes can be stored as different data types, including strings (text),\n        integer, double, dates, and booleans.\n\n        '\n-   The Belmont Report: '\n\n\n        Published by the National Commission for the Protection of Human Subjects\n        of Biomedical and Behavioral Research in 1979, the Belmont Report \"\"identifies\n        basic ethical principles and guidelines that address ethical issues arising\n        from the conduct of research with human subjects\" (source: [HHS.gov](https://www.hhs.gov/ohrp/regulations-and-policy/belmont-report/index.html).\n\n        '\n-   Beneficence: '\n\n\n        Beneficence is a core principle in *the Belmont Report* that stipulates that\n        researchers should \"(1) do not harm and (2) maximize possible benefits and\n        minimize possible harms.\" A key concern when applying this principle is an\n        *assessment of risks and benefits* (source: [The Belmont Report](https://www.hhs.gov/ohrp/regulations-and-policy/belmont-report/index.html#xbasic).\n\n        '\n-   Big data: \"\\n\\n\\\"Big data\\\" generally refers to digital projects that deal with\\\n        \\ very large datasets from which different kinds of patterns or analyses are\\\n        \\ computed. Oftentimes big data researchers do not obtain the informed consent\\\n        \\ of each person represented by or linked to the obtained data. This can be\\\n        \\ an ethical concern, given that \\\"even seemingly innocuous and anonymized\\\n        \\ data have produced unanticipated ethical questions and detrimental impacts\\\"\\\n        \\ (source: [Matthew Zook, et al. 2017](http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005399)).\\\n        \\   \\n\"\n-   Boolean: \"\\n\\nA data type in Python that is either \\\"True\\\" or \\\"False\\\" and is\\\n        \\ often used as a basic building block for logical operations. They are implied\\\n        \\ in conditional statements (which check if expressions are true in order\\\n        \\ to run a bit of code) and can be retruend by functions. \\n\\n\\n\\n- Read more\\\n        \\ about [Booleans and logical operators](https://thomas-cokelaer.info/tutorials/python/boolean.html)\\\n        \\ here. \\n\\n\\n\\n- Check out w3school's tutorial on using [Booleans](https://www.w3schools.com/python/python_booleans.asp).\\\n        \\ \\n\"\n-   branch: '\n\n\n        Branches are not used in the Git session in this curriculum, but are a frequently\n        used feature of Git. A branch is an alternative timeline of commits, usually\n        used to add a new feature or some other substantive change to a repository.\n        Once the feature or change is complete, the branch can be reintegrated with\n        the main timeline, which is usually called \"master.\" The process of reintegration\n        is referred to as \"merging\".\n\n\n        #\n\n\n        - [\"Git Branching - Branches in a Nutshell\"](https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell),\n        in Scott Chacon and Ben Straub, _Pro Git_, 2nd edition (Apress, 2014)\n\n\n        #\n\n\n        - [\"Git Branching - Basic Branching and Merging\"](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging),\n        _git-scm.com_\n\n        '\n-   Category: \"\\n\\nA category is \\\"a term (meaning literally \\u2018predication\\u2019\\\n        \\ or \\u2018assertion\\u2019) given to certain general classes of terms, things,\\\n        \\ or notions\\\" (source: Oxford English Dictionary online). The construction\\\n        \\ and reproduction of categories\\u2014through e.g. library subject headings,\\\n        \\ tags on websites, categorization methods informing algorithms, and spatial\\\n        \\ divisions on a map\\u2014are an important ethical consideration when doing\\\n        \\ digital research or a digital project.\\n\"\n-   Class: '\n\n\n        Class is an attribute used in HTML and CSS to select and access specific elements.\n        Class is especially useful in applying standard styling to repeating elements\n        across a website. This helps create a consistent look to a website.'\n-   Cloning: \"\\n\\nCloning a repository means making a copy of a repository on GitHub,\\\n        \\ to download and work on locally--on your local machine. \\n\\nCloning can\\\n        \\ be especially useful when you're joining a group project that is hosted\\\n        \\ on GitHub, and you want your changes to eventually be pushed and shared\\\n        \\ with that same repository. \\n\\nCloning can also be used in conjunction with\\\n        \\ forking. For example, you could fork the GitHub repository of this lesson\\\n        \\ to your GitHub account, and then clone or download the repository to make\\\n        \\ edits and admendations. Then you would push those changes to a repository\\\n        \\ under your GtiHub account. Git and GitHub work to make sure attribution\\\n        \\ of contributions and lineage are transparent. \\n\\n#\\n\\n- [Cloning a repository\\\n        \\ from GitHub](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository-from-github)\"\n-   Color ramp: \"\\n\\nprovides a range of color to the features of a map layer based\\\n        \\ on an attribute from the layer. \\n\"\n-   Command Line: '\n\n\n        The command line is a text-based way of interacting with your computer. Another\n        way of looking at it is that the command line is a program that accepts commands\n        as text input and converts them into appropriate operating system functions.\n\n\n        There are other words that can be used synonymously with \"command line.\" Here\n        are some of them:\n\n        - _bash_ - the programming language used in the command line. (Yes, we tricked\n        you, you''re already programming!) Short for \"Born Again SHell,\" for reasons\n        people on the internet will happily tell you about.\n\n        - _the terminal_ - Particularly used to refer to the command line on macOS.\n        This term made more sense when universities used mainframes and every computer\n        was only a terminal.\n\n        - _the shell_ - The part of an operating system that interacts with a human.\n        Technically, anything you do in a graphical interface is also in a shell,\n        but in practice this is just another synonym for the command line.\n\n        - _cli_ - \"command-line interface,\" this is a super technical term for the\n        command line used to impress everyone around you.\n\n        '\n-   Commit: \"\\n\\nWhen you commit your changes using Git, you are created a version\\\n        \\ a file that can be referenced even after further changes to the file are\\\n        \\ made and committed. \\n\\nMaking a commit involves 2 steps. \\n- First, you\\\n        \\ need to stage  the files, or tell Git, which files it should pay attention\\\n        \\ to. Where are your changes? You use the command `git add` to point to them.\\\n        \\ \\n- Second, you create the version by committing the changes. You use the\\\n        \\ command `git commit` to take the snapshot and add a label (the -m flag)\\\n        \\ that can help you in returning to that version in the future.\\n\\nMaking\\\n        \\ a commit is a lot like taking a photo. First, you have to decide who will\\\n        \\ be in the photo and arrange your friends or family in front of the camera\\\n        \\ (the staging process). Once everyone is present and ready, you take the\\\n        \\ picture, entering that moment into the permanent record (the commit process).\\n\\\n        \\nBefore any of this can happen, you must initialize the Git folder, or put\\\n        \\ it on Git's radar. This only needs to happen one time to a folder.\"\n-   Concordance: '\n\n\n        Nltk function that allows to see the characters on both sides of the word;\n        an easy way to investigate the context of a certain word across a corpus.'\n-   Consent: '\n\n\n        To provide consent is to actively provide permission or agree to something.\n        The more specific term *\"informed consent\"* is used to emphasize that in order\n        to provide such permission, a person must be provided clear and correct information\n        (not deception), and be able to comprehend such information. In the context\n        of a research study, per *The Belmont Report* guidelines, a person must also\n        be informed of their right to volunteer or not to participate in the study,\n        and of their right to withdraw from the study at any point. Ideally, consent\n        would also be enthusiastically given (see [The Belmont Report](belmont.md)\n        page; also see [this image](https://github.com/DHRI-Curriculum/ethics/blob/master/images/consent_pp.png)\n        from Planned Parenthood that reads \"CONSENT: I [heart] FRIES: Freely given,\n        Reversible, Informed, Enthusiastic, Specific.\"'\n-   Corpus: '\n\n\n        A collection of texts that are somehow related to each other. Plural: /corpora/'\n-   CSS: \"\\n\\nCSS (Cascading Style Sheets) is usually used in conjunction with HTML.\\\n        \\ HTML tells the browser what the different parts of a document _are_. CSS\\\n        \\ tells the browser what the parts of the document should _look like_. It\\\n        \\ is essentially a set of rules that are applied when rendering an HTML document.\\\n        \\ Its name\\u2014Cascading Style Sheets\\u2014refers to the fact that there\\\n        \\ is an order of precedence in how the browswer applies CSS rules to a text. \"\n-   CSS Selectors: \"\\n\\nCSS Selectors select HTML elements on which to apply particular\\\n        \\ styling rules. For example, in the following CSS rule set, the `h1` selector\\\n        \\ applies orange color and italics to all content in the `h1` element.\\n\\n\\\n        ```css\\nh1 {\\n    color: orange;\\n    font-style: italic;\\n}\\n```\\n\"\n-   CSV (file format): '\n\n\n        CSV or Comma Separated Values uses---you guessed it!---commas to separate\n        values. Each line (First Name, Last Name) is a new \"record\" and each column\n        (separated by a comma) is a new \"field.\" This data format stores tabular data\n        in a clean way that facilitates the transfer between different data architectures.\n        As data types go, it is very rudimentary (even predating computers!) and is\n        easy to type, without needing special characters beyond a comma.\n\n\n        ```\n\n        First Name,Last Name\n\n        Smally,McTiny\n\n        Kitty,Kitty\n\n        Foots,Smith\n\n        Tiger,Jaws\n\n        ```'\n-   Data: \"\\n\\nThere are many different perspectives towards what counts as data.\\\n        \\ Some cites data as \\\"material or information\\\" for which \\\"an argument,\\\n        \\ theory, test or hypothesis, or another research output is based\\\" upon ([Queensland\\\n        \\ University of Technology](http://www.mopp.qut.edu.au/D/D_02_08.jsp)), while\\\n        \\ others critiques the understanding of data as \\\"mere descriptions ofa priori\\\n        \\ conditions\\\" ([Johanna Drucker](http://www.digitalhumanities.org/dhq/vol/5/1/000091/000091.html)).\\\n        \\ Data, in our case, are subjective (because of our interests and assumptions)\\\n        \\ and are materials and/or information necessary to come to our conclusion.\\\n        \\ \\n\\n#\\n\\n- Johanna Drucker's [Humanities Approaches to Graphical Display](http://www.digitalhumanities.org/dhq/vol/5/1/000091/000091.html)\\n\\\n        - Matthew Salganik's [Readymade v. Custommade Data](https://www.bitbybitbook.com/en/1st-ed/introduction/themes/)\\n\\\n        - Catherine D'Ignazio and Lauren Klein's [The Numbers Don't Speak for Themselves](https://data-feminism.mitpress.mit.edu/)\"\n-   Database: '\n\n\n        A database is a collection of data that is structured to allow for manipulation.\n\n        '\n-   Descriptive Analysis: '\n\n\n        Descriptive analysis are techniques geared towards summarizing a data set,\n        such as:\n\n\n        - Mean\n\n        - Median\n\n        - Mode\n\n        - Average\n\n        - Standard deviation'\n-   Dictionaries: '\n\n\n        A collection which is unordered, changeable and indexed. In Python dictionaries\n        are written with curly brackets, and they have keys and values.'\n-   dir(): \"\\n\\nThe `dir()` method returns a list of possible methods and attributes\\\n        \\ of an object, such as a variable or string. Useful for seeing what kinds\\\n        \\ of things you can do with that object. \\n\\n\\n\\n- Learn how to use [dir()](https://www.w3schools.com/python/ref_func_dir.asp)\\\n        \\ on w3schools.\\n\"\n-   Discourse: '\n\n\n        Discourses, per Michel Foucault''s theorization, are competing ideologies\n        (or individualized groups of statements), constructed by people and institutions\n        in power over time, that become dominant amongst societies of people. Discourses\n        produce knowledge in mediums that a society perceives as normative and generally\n        does not question; in doing so, discourses pervasively shape how the people\n        in that society think, act, and react (see Michel Foucault, _The Archaeology\n        of Knowledge and the Discourse on Language_, 1969).'\n-   '\"The Distance Principle\"': '\n\n\n        The distance principle refers to \"the extent to which Internet texts or data\n        sets might connect to persons [even when] the conceptual or experiential distance\n        between the researcher and author/participant [does not appear to be] close\"\n        (source:  [Annette Markam and Elizabeth Buchanon](https://www.academia.edu/8037870/Ethical_Concerns_in_Internet_Research).\n\n        '\n-   Elements: '\n\n\n        Elements identify the different parts of a page, such as paragraphs, headings,\n        titles, body text, images and more. Elements are demarcated by tags which\n        enclose the content of an element (ex. `<head>` and `</head>` are tags that\n        denote the head element of your page).'\n-   Ethics: '\n\n\n        Ethics are the moral principles that an individual aims to follow in practice\n        to the best of their ability, research, and foresight.\n\n        '\n-   f-string: \"\\n\\nAlso called \\u201Cformatted string literals,\\u201D f-strings are\\\n        \\ ways of formating text so that expressions (like variables) can appear within\\\n        \\ strings. They have an f at the beginning and curly braces containing expressions\\\n        \\ that will be replaced with their values. \\n\\n\\n\\n- Read more about [f-strings](https://realpython.com/python-f-strings/#f-strings-a-new-and-improved-way-to-format-strings-in-python)\\\n        \\ on Real Python.\\n\\n\\n\\n- See [examples for using f-strings](https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/)\\\n        \\ on Geeks for Geeks.\\n\"\n-   Feature: \"\\n\\nA feature is a visual element on a map. For vector data it's the\\\n        \\ points, lines and polygons. Each individual feature (each point, each line,\\\n        \\ and each polygon) is represented as a row in the attribute table. \\n\"\n-   \"Filesystem\\t\": \"\\n\\nA\\_filesystem (or file system) is a set of methods and data\\\n        \\ structures that an operating system (e.g., Windows, MacOS, Linux, etc.)\\\n        \\ uses to  control how data is stored and retrieved on a disk (such as your\\\n        \\ computer\\u2019s hard drive, or even a USB pen drive). Some operating systems\\\n        \\ include support for more than one file system. \"\n-   float: \"\\n\\nA data type in Python that represents numbers with decimal points.\\\n        \\ \\n\\n\\n\\n- Read more about [floats](https://www.geeksforgeeks.org/python-float-type-and-its-methods/)\\\n        \\ on Geeks for Geeks.\\n\"\n-   Forking: \"\\n\\nForking is a proper function of the GitHub platform. It supports\\\n        \\ collaboration by allowing you to copy someone else's repository to your\\\n        \\ own account on GitHub while maintaining a trail of attribution and derivation.\\\n        \\ \\n\\nOnce the files are forks, you can clone or download them, edit them,\\\n        \\ and share your changes on GitHub. Git and GitHub help track and be transparent\\\n        \\ about contributions or attribution. \\n\\n#\\n\\n- [About Forking](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-forks).\\\n        \\ GitHub Writing.\"\n-   for-loop: \"\\n\\nA for-loop is a way of going through an entire sequence of items,\\\n        \\ like a list. A for-loop \\\"iterates\\\" over a sequence, which means it does\\\n        \\ something to each item in that sequence. With for-loops we can carry out\\\n        \\ a command for multiple items in a sequence. \\n\\n\\n\\n- Check out the [for-loop](https://www.w3schools.com/python/python_for_loops.asp)\\\n        \\ description on w3schools.\\n\"\n-   FTP: '\n\n\n        FTP is a protocol used to share files from your computer (_a client_) to another\n        computer called a server, and back again over the internet. '\n-   Function: \"\\n\\nFunctions are ways of doing things in Python. They take some input\\\n        \\ and do something with it, and can return a value. For example, a function\\\n        \\ can return the results of a calculation. If your function takes an argument,\\\n        \\ it will go inside the parentheses. \\n\\nFunctions are first defined then\\\n        \\ called to be executed. This allows you to first write the function but only\\\n        \\ call it (execute its code) when you need to in Python.\\n\\nExample: \\n\\n\\\n        ```python\\ndef multiply(a, b):\\n    result = a * b\\n    return \\n\\nmultiply(2,\\\n        \\ 3)\\n```\\n\\nThe first code block defines the function `multiply()` which\\\n        \\ takes `a` & `b` as arguments. The function sets `result` to the caluclation\\\n        \\ of `a` x `b`. It then returns the value of result. Finally, the function\\\n        \\ is called with arguments `2` & `3`, which will be substituted for `a` and\\\n        \\ `b` in the function definition. \\n\\n\\n\\n- More in-depth exploration of [functions](https://www.programiz.com/python-programming/function)\\\n        \\ on Programiz.\\n\\n\\n\\n- Simple walk-through of [functions](https://www.w3schools.com/python/python_functions.asp)\\\n        \\ on w3schools.\\n\"\n-   Geocoding: '\n\n\n        is a spatial process that uses a *geographic address locator* to match addresses\n        with location coordinates and create a point layer. It turns a text file (e.g.\n        CSV) into a vector file (e.g. points layer).\n\n        '\n-   Git: \"\\n\\nGit is software used for version control\\u2014that is, tracking the\\\n        \\ state of files and changes you make to them over time. Git can be enabled\\\n        \\ in a folder, and then used to save the state of the contents in that folder\\\n        \\ at different points in the future, as designated by you.\\n\\nGit is also\\\n        \\ useful for collaboration, as a repository can be shared across computers,\\\n        \\ and its contents can be asynchonously developed and eventually merged with\\\n        \\ the main project. \\n\\nIn this workshop, you'll use Git on your local machines\\\n        \\ to track changes you make to a file. \\n\\n#\\n\\n- Perez-Riverol, Y. and colleagues.\\\n        \\ (2016) _[Ten Simple Rules for Taking Advantage of Git and GitHub](https://doi.org/10.1371/journal.pcbi.1004947)._\\\n        \\ PLOS Computational Biology.\\n- Chacon, S. and Straub, B. [Pro Git](https://git-scm.com/book/en/v2).\\\n        \\ Published by Apress.\\n\\n#\\n\\n- [An intro to Git: What it is and how to use\\\n        \\ it](https://www.freecodecamp.org/news/what-is-git-and-how-to-use-it-c341b049ae61/)\\n\\\n        \\n#\\n\\n- [Atlassian's Git cheat sheet](https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet)\\\n        \\ is a great resource, handy to have next to your computer as you're learning\\\n        \\ how to use Git.\\n\"\n-   GitHub: \"\\n\\nGitHub is a online platform for hosting Git repositories. It functions\\\n        \\ for some, predominantly programmers, as a social network for sharing and\\\n        \\ collaborating on code-based projects. Users can share their own projects,\\\n        \\ as well as search for others, which they can then often work on and contribute\\\n        \\ to.\\n\\nDigital Humanists, librarians, and other academics are also finding\\\n        \\ ways Git and GitHub are useful in writing projects and teaching. \\n\\nGitHub\\\n        \\ also serves as a web-hosting platform, allowing users to create websites\\\n        \\ from their repositories.\\n\\n#\\n\\n- Pe-Than, E.P.P., Dabbish, L. and Herbsleb,\\\n        \\ J.D. (2019). [Collaborative Writing at Scale: A Case Study of Two Open-Text\\\n        \\ Projects Done on GitHub](https://ci.acm.org/2019/assets/proceedings/CI_2019_paper_65.pdf).Collective\\\n        \\ Intelligence.\\n\\n\\n#\\n\\n- [Getting Started with GitHub](https://help.github.com/en/github/getting-started-with-github)\\n\\\n        - Miyake, K. (2016). [Create Your (FREE) Website Using Github and Jekyll](https://digitalfellows.commons.gc.cuny.edu/2016/03/21/create-your-free-website-using-github-and-jekyll/).\\\n        \\ Tagging the Tower blog.\\n- Visconti, A. (2016). [Building a static website\\\n        \\ with Jekyll and GitHub Pages](https://programminghistorian.org/en/lessons/building-static-sites-with-jekyll-github-pages).\\\n        \\ Programming Historian.\"\n-   \"GUI\\_\": \"\\n\\n\\\"Graphical User Interface,\\u201D pronounced \\\"gooey.\\u201D It\\u2019\\\n        s a system of interactive visual components for computer software\\u2026 basically,\\\n        \\ anything on a computer that isn't in the command line. All familiar elements\\\n        \\ of day-to-day computer tasks such as images, windows, prompts, buttons,\\\n        \\ and progress bars are part of the GUI. The way most people interact with\\\n        \\ computers. Some tasks can only be done in a GUI, while others can only be\\\n        \\ done in the command line.\\n\"\n-   Hegemony: \"\\n\\nAntonio Gramsci's concept of hegemony refers to \\u201Cthe ability\\\n        \\ of a dominant group to create [majority] consent and agreement [around a\\\n        \\ particular system of meanings] within a population without the use or threat\\\n        \\ of force\\u201D (source: Kenneth Guest, *Cultural Anthropology: A Toolkit\\\n        \\ for a Global Age*, 2014, page 52). Hegemony is one way of understanding\\\n        \\ how dominant forms of knowledge and power produce and reinforce each other.\\n\"\n-   High Quality Data: \"\\n\\nHigh quality data is often understood as valid, accurate,\\\n        \\ complete, consistent, and uniformed. This is often achieved through the\\\n        \\ cleaning process. \\n\\nMeasurements are valid when they conform to set constraints.\\\n        \\ They are accurate when they represent the correct values (often requiring\\\n        \\ cross-referencing trusted external sources). They are complete when they\\\n        \\ represent everything that might be known and are consistent when observations\\\n        \\ do not contradict each other. Measurements are uniform when the same unit\\\n        \\ of measure is used in all relevant measurements.  \"\n-   HTML: '\n\n\n        HTML (Hypertext Markup Language) is a markup language used to write web-based\n        documents. It enables us to provide web browsers with information about the\n        _content_ of a document. We can, for example, indicate that some part of our\n        document is a paragraph, image, heading, or link. The browser uses this information\n        when displaying the document for users.'\n-   Human subjects: \"\\n\\nA human subject refers to \\\"a living individual about whom\\\n        \\ an investigator (whether professional or student) conducting research obtains\\\n        \\ (1) data through intervention or interaction with the individual, or (2)\\\n        \\ identifiable private information\\\" (source: [HHS.gov](https://www.hhs.gov/ohrp/regulations-and-policy/regulations/45-cfr-46/index.html)).\\\n        \\ However, according to [the AoIR Ethics Working Committee's 2012 report](http://aoir.org/reports/ethics2.pdf),\\\n        \\ \\\"The definition of \\u2018human subject\\u2019 has become, unfortunately,\\\n        \\ a litmus test for whether or not one needs to undergo ethical review before\\\n        \\ conducting research... \\u2018human subject\\u2019 has never been a good fit\\\n        \\ for describing many internet-based research environments.\\\"\\n\"\n-   ID: '\n\n\n        ID is an attribute used in HTML and CSS to create unique identifiers. IDs\n        facilitate fine-grained styling of websites by allowing us to select and access\n        unique elements.'\n-   if-Statement: \"\\n\\n\\nIf-statements check whether a statement meets a certain condition,\\\n        \\ and are used to write code that \\\"makes decisions\\\". They start with `if`\\\n        \\ followed by a condition which is evaluated to be either true or false. If\\\n        \\ it's true, the block after the colon (`:`) is run. If it's false, the block\\\n        \\ under the `else:` is run. \\n\\n```python\\nweather = \\\"sunny\\\"\\n\\nif weather\\\n        \\ == \\\"sunny\\\":\\n    print(\\\"Bring your shades\\\")\\nelif weather == \\\"rainy\\\"\\\n        :\\n\\tprint(\\\"Bring your umbrella\\\")\\nelse:\\n    print(\\\"I don't know what\\\n        \\ you should bring! I'm just a little program...\\\")\\n```\\n\\n\\n\\n- More detailed\\\n        \\ explanation of [if-statements and conditionals](https://realpython.com/python-conditional-statements/)\\\n        \\ on Real Python.\\n\\n\\n\\n- Quick explanation of [if-statements](https://www.w3schools.com/python/python_conditions.asp)\\\n        \\ from w3schools.\\n\"\n-   Impact approach: '\n\n\n        An impact approach to doing ethical research is based on the assumption that\n        all research has impacts and thus a researcher should be critical and intentional\n        with what sorts of impacts they aim for or expect to result, and take personal\n        responsibility for the effects of their research methods (source: [Annette\n        Markham 2016](http://annettemarkham.com/2016/05/okcupid-data-release-fiasco-its-time-to-rethink-ethics-education/)).\n        Markham focuses on three levels of impact: direct impacts on people, the ramifications\n        of (re)producing categories, and social, political and economic effects.\n\n        '\n-   Inferential Analysis: '\n\n\n        Inferential analysis are techniques geared towards testing a hypothesis about\n        a population, based on your data set, such as:\n\n\n        - Extrapolation\n\n        - P-Value calculation\n\n        '\n-   input(): \"\\n\\nThe `input()` function asks the user for an input. It prompts the\\\n        \\ user to enter input through the keyboard and saves it. This function enables\\\n        \\ programs to respond to user input. For example, it can ask for the user's\\\n        \\ name and print the name The input function can take a prompt within the\\\n        \\ parenthesis, which it will use to prompt the user to enter the input. \\n\\\n        \\nFor example: \\n\\n```pycon\\n>>> name = input(\\\"Enter your name here: \\\")\\n\\\n        Enter your name here: Filipa\\n>>> name\\n'Filipa'\\n```\\n\\n\\n\\n- Detailed article\\\n        \\ on [`input()`](https://stackabuse.com/getting-user-input-in-python/) from\\\n        \\ Stack Abuse.\\n\\n\\n\\n- Check out the [`input()`](https://www.w3schools.com/python/ref_func_input.asp)\\\n        \\ tutorial on w3schools. \\n\"\n-   Institutional Review Board (IRB): '\n\n\n        An institutional body (a designated group of people) that is intended to provide\n        oversight, administrative support, and educational training to ensure that\n        research with human subjects done by researchers of that institution complies\n        with federal and state regulations, and university or institutional policy.\n        Every university or research institution must, legally, have its own or an\n        affiliated IRB.\n\n        '\n-   integer: \"\\n\\nAn integer is a data type, like string, list, boolean, and float.\\\n        \\ It signifies any value that is a whole number. You can check if a value\\\n        \\ is an integer with the `type()` function, passing the value as an argument\\\n        \\ within the parenthesis. \\n\\n\"\n-   'Spatial join by attribute ': '\n\n\n        is based on adding the attributes from one layer to another based on a shared\n        attribute or variable.\n\n        '\n-   Spatial Join by location: '\n\n\n        is when you have two shapefiles that you want to combine based on where the\n        features are located on the map. For example if you have a map of US states\n        and you want to add information about its cities, you can run a spatial join\n        by location.\n\n        '\n-   JSON (file format): \"\\n\\nJSON or JavaScript Object Notation, also uses a nesting\\\n        \\ structure, but with the addition of \\\"key/value\\\" pairs, like the firstName\\\n        \\ key which is tied to the `Smally` value (at least for the first cat!). JSON\\\n        \\ is popular with web applications that save and send data from your browser\\\n        \\ to web servers, because it uses the main language of web browsers, JavaScript,\\\n        \\ to work with data.\\n\\n```json\\n{\\n    \\\"Cats\\\": [ \\n        {\\n        \\\n        \\    \\\"firstName\\\": \\\"Smally\\\",\\n            \\\"lastName\\\": \\\"McTiny\\\"\\n  \\\n        \\      }, \\n        {\\n            \\\"firstName\\\": \\\"Kitty\\\",\\n           \\\n        \\ \\\"lastName\\\": \\\"Kitty\\\"\\n        },\\n        {\\n            \\\"firstName\\\"\\\n        : \\\"Foots\\\",\\n            \\\"lastName\\\":\\\"Smith\\\"\\n        }, \\n        {\\n\\\n        \\            \\\"firstName\\\": \\\"Tiger\\\",\\n            \\\"lastName\\\":\\\"Jaws\\\"\\n\\\n        \\        } \\n    ]\\n} \\n```\"\n-   Jupyter Notebook: '\n\n\n        The Jupyter Notebook is an open-source web application that allows you to\n        create and share documents that contain live code, equations, visualizations\n        and narrative text.\n\n\n        #\n\n\n        - [Jupyter Notebook Documentation](https://jupyter.org/documentation)\n\n\n        #\n\n\n        - [Jupyter Notebook Tips and Tricks](https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/)'\n-   Justice: '\n\n\n        A core principe in *the Belmont Report* that stipulates that researchers should\n        justly distribute the burdens and benefits of the research studey: \"(1) to\n        each person an equal share, (2) to each person according to individual need,\n        (3) to each person according to individual effort, (4) to each person according\n        to societal contribution, and (5) to each person according to merit.\" A key\n        concern when applying this principle is the *selection of subjects*, that\n        is, the fair recruitment and selection of research subjects (source: [The\n        Belmont Report](https://www.hhs.gov/ohrp/regulations-and-policy/belmont-report/index.html#xbasic).\n\n        '\n-   Layers: '\n\n\n        Layers are \"containers\" of the data in QGIS. On the map view, layers can be\n        imagined as transparent film sheets that are laid one over another. With the\n        exception of raster layers, each layer contains an Attribute Table, that is,\n        a series of features that in turn have their own attributes. Vector layers\n        can only contain one type of vectors, be it: points, lines or polygons.\n\n        '\n-   Lemmatization: '\n\n\n        A process of collapsing words in an attempt to reduce the number of words,\n        and get a realistic understanding of the meaning of a text. Lemmatization\n        references the word and finds the appropriate root and can therefore take\n        longer than other processes of collapsing words. See \"stemming\" in this glossary\n        for another process of collapsing words in a corpus.'\n-   len(): \"\\n\\n`len()` is a function that calculates the length of the object within\\\n        \\ the parenthesis. For a string, it will count the number of characters: `len(\\\"\\\n        hello\\\")` will return `5`, and `len(\\\"hi there\\\")` will return `8`, because\\\n        \\ it counts blank spaces. For a list, `len()` will count the number of list\\\n        \\ items: \\n\\n```pycon\\n>>> groceries = [\\\"berries\\\", \\\"bananas\\\", \\\"oat milk\\\"\\\n        , \\\"eggs\\\", \\\"spinach\\\", \\\"bell peppers\\\", \\\"ice cream\\\", \\\"frozen pizza\\\"\\\n        , \\\"floss\\\", \\\"hand soap\\\"]\\n>>> len(groceries)\\n10\\n```\\n\\n\\n\\n- Read more\\\n        \\ about [`len()`](https://www.programiz.com/python-programming/methods/built-in/len)\\\n        \\ and more things it can calculate.\\n\\n\\n\\n- Check out [`len()`](https://www.w3schools.com/python/ref_func_len.asp)\\\n        \\ on w3schools.\\n\"\n-   Lexical Density: \"\\n\\nThe number of unique words per total words; a good metric\\\n        \\ to approximate lexical diversity\\u2014the range of vocabulary an author\\\n        \\ uses.\"\n-   Library: '\n\n\n        A Python library is a reusable piece of code / sets of instructions that you\n        use in your script.\n\n\n        '\n-   list: \"\\n\\nA list is a data type, like string, integer, float, and Boolean. A\\\n        \\ list holds items in a sequence, separated by commas and contained within\\\n        \\ square brackets. They can hold different types of data, like strings, integers,\\\n        \\ floats, etc. Items within a list can be accessed by list indexing or slicing.\\\n        \\ \\n\\n\\n\\n- Read more about how to use [lists](https://www.programiz.com/python-programming/list)\\\n        \\ on Programiz. \\n\"\n-   list indexing: \"\\n\\nList indexing is a foundational tool for working with lists.\\\n        \\ It allows one to access items from a list by specifying the item according\\\n        \\ to its location within the list. The item location is represented the number\\\n        \\ within brackets. In a list index, the count starts at 0, so the first item\\\n        \\ is accessed by `list[0]` and the second item by `list[1]`, the third item\\\n        \\ by `list[2]`, and so on. \\n\\n\\n\\n- Check out this article about [list indexing](https://towardsdatascience.com/the-basics-of-indexing-and-slicing-python-lists-2d12c90a94cf)\\\n        \\ on Medium, which also covers slicing lists.\\n\"\n-   lower(): \"\\n\\n`lower()` is a string method for making all of the letters within\\\n        \\ a string into lowercase letters. It uses the dot syntax `.` for creating\\\n        \\ the expression. For example, \\\"HEllO\\\" can be transformed into lowercase\\\n        \\ by running `\\\"HELLO\\\".lower()`, which will return the string `'hello'`.\\\n        \\ \\n\\n\\n\\n- Read about `lower()` and related methods like `upper()`, `isupper()`\\\n        \\ and `islower()` on [Geeks for Geeks](https://www.geeksforgeeks.org/isupper-islower-lower-upper-python-applications/).\\n\\\n        \\n\\n\\n- See how to use [`.lower()`](https://www.w3schools.com/python/ref_string_lower.asp)\\\n        \\ on w3schools.\\n\"\n-   Machine Learning: '\n\n\n        Machine Learning is the study of computer algorithms that improve automatically\n        through experience.\n\n\n        '\n-   Markdown: \"\\n\\nMarkdown is the language used to format the plain text files in\\\n        \\ your Git-enabled repository. Its also called a markup language, like HTML.\\\n        \\ Both languages add markers to plain text to style and organize the text\\\n        \\ of a document.\\n\\nIn HTML:\\n\\n```html \\n<h1> Heading 1 </h1>\\n```\\n\\nIn\\\n        \\ Markdown:\\n\\n```md\\n\\n```\\n\\nWhereas you use HTML and CSS with WordPress,\\\n        \\ you use Markdown with Git and GitHub. Markdown has fewer options for marking\\\n        \\ text than HTML. It was designed to be human-readable, meaning easy to write\\\n        \\ and edit. \\n\\n#\\n\\n- Coll, S. (2017). [Markdown for Students and Academics](https://www.simondcoll.com/markdown-students-academics/).\\n\\\n        - Ovadia, S. (2014). [Internet Connection: Markdown for Librarians and Academics](https://academicworks.cuny.edu/cgi/viewcontent.cgi?article=1006&context=lg_pubs)\\n\\\n        \\n#\\n\\n- [Mastering Markdown](https://guides.github.com/features/mastering-markdown/).\\\n        \\ GitHub Guides.\\n\\n#\\n\\n- Adam Pritchard's [Markdown Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\\\n        \\ is a great resource if you need a quick overview of what features are available\\\n        \\ in Markdown.\\n- The Markdown Guide, a free and open-source reference guide\\\n        \\ to Markdown, features a [Markdown Cheat Sheet](https://www.markdownguide.org/cheat-sheet)\\\n        \\ on their website.\\n\"\n-   Markup: '\n\n\n        Markup languages allow you to format things, whether they''re documents, posters,\n        or websites. HTML is a markup language, as is LaTeX.\n\n\n        #\n\n\n        - [WP-Amelia, Mark-Up Languages](https://wpamelia.com/markup-languages/)\n\n        - [W3C HTML homepage](https://www.w3.org/html/)\n\n        '\n-   Matplotlib: '\n\n\n        Matplotlib is a comprehensive library for creating static, animated, and interactive\n        visualizations in Python.\n\n\n        #\n\n\n        - [Matplotlib User''s Guide](https://matplotlib.org/users/index.html)\n\n\n        '\n-   Merge conflict: \"\\n\\nIf, when attempting to merge, there is a line that has been\\\n        \\ changed by both parties, you will experience a merge conflict. This means\\\n        \\ that Git needs your manual intervention to decide which of the two changes\\\n        \\ will be the canonical or accepted change. A merge conflict is resolved by\\\n        \\ editing the conflicting files with a text editor, then adding and committing\\\n        \\ to resolve the merge.  \\n\"\n-   Merging: \"\\n\\nIf you've advanced the timeline of a repository by making commits,\\\n        \\ and someone else has advanced the timeline of a remote version of the repository,\\\n        \\ when you attempt to pull in the remote changes you will be prompted to merge\\\n        \\ the two timelines. In most cases this is an automatic process that reconciles\\\n        \\ the two timelines.  \\n\"\n-   Metadata: '\n\n\n        Any data that describes your book: title, subtitle, author bio, book description,\n        price, publication date, ISBN, etc.'\n-   Method: \"\\n\\nA method in Python is similar to a function, in that it allows us\\\n        \\ to do things with data. However, a method is attached to what we call an\\\n        \\ *object*, which is a representation of data. Accordingly, a method operates\\\n        \\ as a function that is specifically available for that object. \\n\\nMethods\\\n        \\ are accessed through the dot syntax `.`.  For example, the method `lower()`\\\n        \\ can be attached to a string object like so: `\\\"HELLO\\\".lower()` and will\\\n        \\ return the string `'hello'`. \\n\\n\\n\\n- Read about [the difference between\\\n        \\ a method and a function](https://www.tutorialspoint.com/difference-between-method-and-function-in-python)\\\n        \\ on Tutorials Point.\\n\\n- If you know something about [classes](https://www.w3schools.com/python/python_classes.asp)\\\n        \\ and are ready to jump deeper into Object Oriented Programming, you can learn\\\n        \\ more about [methods and classes](https://data-flair.training/blogs/python-method/)\\\n        \\ on Data Flair. \\n\"\n-   Modules: \"\\n\\nA module is a python file (like a script) that contains a number\\\n        \\ of functions and expressions that you want to include in your program. Programmers\\\n        \\ often import modules written by other programmers and use them like building\\\n        \\ blocks for their applications. \\n\\nIn order to use modules, you need to\\\n        \\ add them to your script with `import` and then indicate which function you\\\n        \\ want to use with the dot syntax `.`. For example, we might use the function\\\n        \\ `choice` from the [`random`](https://docs.python.org/3/library/random.html)\\\n        \\ module, to generate random numbers. \\n\\n```pycon\\n>>> import random\\n>>>\\\n        \\ numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\\n>>> random.choice(numbers)\\n1\\n>>>\\\n        \\ random.choice(numbers)\\n3\\n>>> random.choice(numbers)\\n3\\n>>> random.choice(numbers)\\n\\\n        1\\n>>> random.choice(numbers)\\n4\\n>>> random.choice(numbers)\\n9\\n```\\n\\n\\n\\\n        \\n- An in depth explanation of [modules](https://docs.python.org/3/tutorial/modules.html)\\\n        \\ from the Python docs. \\n\\n\\n\\n- A step-by-step tutorial on w3schools that\\\n        \\ demonstrates [how modules are composed](https://www.w3schools.com/python/python_modules.asp).\\\n        \\ \\n\"\n-   The National Commission for the Protection of Human Subjects of Biomedical and Behavioral Research: '\n\n\n        A commission created as a result of the National Research Act of 1974, \"charged\n        with identifying the basic ethical principles that should underlie the conduct\n        of biomedical and behavioral research involving human subjects and developing\n        guidelines to assure that such research is conducted in accordance with those\n        principles\" (source: [HHS.gov](https://www.hhs.gov/ohrp/regulations-and-policy/belmont-report/index.html).\n\n        '\n-   NLTK: '\n\n\n        The Natural Language Toolkit (NLTK) is platform for Python for working with\n        human language data.\n\n\n        #\n\n\n        - [The NLTK Documentation](http://www.nltk.org/)'\n-   Objects: \"\\n\\nEven though you probably don't know it, you've been using objects\\\n        \\ in Python all along. Nearly everything in Python is made out of objects,\\\n        \\ which are representations of values. For example, the string `\\\"hello\\\"\\\n        ` is an object. So is the variable `greeting` that stores `\\\"hello\\\"`. Integers,\\\n        \\ floats, and lists are also objects. \\n\\nTo help you do more complex things\\\n        \\ with objects, you can learn *object-oriented-programming*, which is an approach\\\n        \\ toward programming that centralizes objects. This approach deploys what\\\n        \\ we call *classes* to define and create new objects, as well as *inheritance*\\\n        \\ to build new objects from old ones. This is definitely intermediate stuff,\\\n        \\ so make sure you have a grasp on basic concepts like data types, variables,\\\n        \\ loops, and conditionals before moving onto object-oriented-programming.\\\n        \\ \\n\\n\\n\\n- [This thread](https://stackoverflow.com/questions/56310092/what-is-an-object-in-python)\\\n        \\ from Stack Overflow does a good job what objects are from a beginner's point\\\n        \\ of view. \\n\\n\\n\\n- If you want to get your feet wet with a little object-oriented-programming,\\\n        \\ check out this [objects and classes](https://www.learnpython.org/en/Classes_and_Objects)\\\n        \\ tutorial on w3schools.\\n\"\n-   Open Data Formats: '\n\n\n        Open data formats are file formats that are available to anyone, free of charge,\n        which allows for accessibility, future-proofing, and preservation. These file\n        formats also allow for easy reusability and aids research reproduction and\n        accountability. They are not limited by intellectual property rights or copyrights.\n        This is distinct from proprietary formats. Some examples of open data formats\n        are `.csv`, `.pdf`, and `.json`.\n\n\n        #\n\n\n        - Library of Congress [Recommended Formats Statement](https://www.loc.gov/preservation/resources/rfs/)\n\n        - Stanford University''s [best practices for file formats](https://library.stanford.edu/research/data-management-services/data-best-practices/best-practices-file-formats)\n\n        '\n-   Origin: \"\\n\\nIn Git, the default remote repository. When you clone a remote repository\\u2014\\\n        that is, make a local reposotry based on it\\u2014the remote repository is\\\n        \\ automatically added as \\\"origin.\\\"\\n\"\n-   part-of-speech (POS) tagging: '\n\n\n        A way to identify the category of words in a given text. For a list of POS\n        classification, see the [Penn Tree Bank Tag Set](https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html)\n\n\n        '\n-   \"Path\\_\": \"\\n\\nA list of folders on your system that are checked for programs\\\n        \\ to generate the list of commands available on the command line. For example,\\\n        \\ since the folder\\_`/bin`\\_is typically on the path, putting an executable\\\n        \\ program in that folder will make it available as a command.\\n\"\n-   Personhood: '\n\n\n        Personhood is \"the quality or condition of being a person; [especially] personal\n        identity, selfhood\" (Oxford English Dictionary online). When doing internet\n        or digital research, it is important to consider how a person''s data, avatar,\n        images, videos, audio files, social media and other forms of digital information\n        may be understood as an expression of their personhood (source: [the AoIR\n        Ethics Working Committee''s 2012 report](http://aoir.org/reports/ethics2.pdf).\n\n        '\n-   Phatic Language: '\n\n\n        Phatic language is language primarily for communicating social closeness.\n        Phatic words stand in contrast to semantic words, which contribute meaning\n        to the utterance.\n\n        '\n-   Policing the crisis: '\n\n\n        Stuart Hall et al.''s concept of \"policing the crisis\" refers to the unnatural\n        process by which certain actions (by certain people) become and continue to\n        be understood, reported, policed, and sanctioned as a type of \"crime.\" The\n        police, the judicial system, and mainstream media \"are actively and continuously\n        part of [this] whole process\" (source: Stuart Hall et al., Policing the Crisis,\n        2013 [1978], page 54.\n\n        '\n-   Polygon: '\n\n\n        a figure with three or more sides. In GIS, it usually refers to complex areas\n        outlining lakes, city blocks, a set of buildings, or other complex features\n        of the map, that can be outlined using interconnected points. A polygon can\n        have an unlimited amount of points. The more points (or \"higher the resolution\"),\n        the smoother the polygon will look to the human eye.\n\n        '\n-   pop(): '\n\n\n        `pop()` is a method that removes the last item from a list.\n\n\n\n\n        - Check out these examples for using [`pop()`](https://www.w3schools.com/python/ref_list_pop.asp)\n        from w3schools.\n\n        '\n-   print(): '\n\n\n        `print()` is a function that \"prints\" or displays whatever is inside the parentheses\n        in the terminal window.\n\n\n        For example, running `print(\"Hello World!\")` will output the string `''Hello\n        World''` to the terminal window.\n\n\n\n\n        - See the possibilities with [`print()`](https://www.w3schools.com/python/ref_func_print.asp)\n        on w3schools.\n\n        '\n-   Programming Language: '\n\n\n        Programming languages are used to transform data, by creating scripts that\n        organize an output of data based on a particular input of data. Examples of\n        programming languages include python and javascript.'\n-   Proprietary Data Formats: \"\\n\\nProprietary data file formats are file formats\\\n        \\ that rely on dedicated, licensed softwares and/or systems. These file formats\\\n        \\ are often copyrighted, patented, or have other restrictions placed on them,\\\n        \\ and often require a fee or a paid-for software to open. These file formats\\\n        \\ are usually discouraged in research projects, especially those with intentions\\\n        \\ to share with a wider public(s) and audience. This is distinct from open\\\n        \\ data formats. Some examples of it include .xslx, .doc, and .3ds. \\n\\n#\\n\\\n        \\n- Library of Congress [Recommended Formats Statement](https://www.loc.gov/preservation/resources/rfs/)\\n\\\n        - Stanford University's [best practices for file formats](https://library.stanford.edu/research/data-management-services/data-best-practices/best-practices-file-formats)\"\n-   Pull Request: \"\\n\\nA pull request is a set of proposed changes to a repository.\\\n        \\ If you wish to contribute to an open-source project, the most common method\\\n        \\ is by proposing changes through pull requests.  \\n\"\n-   Pull: \"\\n\\nAccepting and taking changes that were made to a remote repository,\\\n        \\ possibly by someone else, and updating your local repository to match. \\\n        \\ \\n\"\n-   Push: \"\\n\\nWhen you push your files, or use the command `git push master origin`,\\\n        \\ you are communicating with GitHub to update the connected project folder\\\n        \\ stored there. You are pushing the changes, say, to your syllabus.md file\\\n        \\ stored on their servers which you access via your gitHub.com. \\n\\n#\\n\\n\\\n        - [Pushing commits to a remote repository](https://docs.github.com/en/github/using-git/pushing-commits-to-a-remote-repository).\\\n        \\ GitHub Writing.\"\n-   Qualitative Analysis: '\n\n\n        Qualitative analysis are techniques geared towards understanding a phenomenon,\n        rather than predicting and testing hypotheses, such as:\n\n\n        - Grounded Theory/Computational Grounded Theory\n\n        - Content Analysis\n\n        - Text Analysis\n\n\n        #\n\n\n        - [Computational Grounded Theory: A Methodological Framework](https://drive.google.com/file/d/0BxI6W5IIG74FeEtGbjQ0WF9uM0U/view)'\n-   random: \"\\n\\nThe random module or random library allows one to generate random\\\n        \\ output. The module is useful for to choose a random element from a list,\\\n        \\ or number from a range, or between two potential values (like True or False).\\\n        \\ \\n\\n\\n\\n- For a thorough description of the [random module](https://docs.python.org/3/library/random.html),\\\n        \\ check out the official documentation.\\n\\n\\n\\n- For step-by-step demonstration\\\n        \\ of [how to use random](https://www.pythonforbeginners.com/random/how-to-use-the-random-module-in-python),\\\n        \\ check out this tutorial from Python For Beginners. \\n\"\n-   Raster: '\n\n\n        images of a specific location that represent visually continuous data such\n        as temperature and elevation at a given resolution. Higher resolutions mean\n        more precision but also larger file size. Raster layers have no Attribute\n        Table; the values are stored within the image and represented as different\n        hues or colors. Raster images can also be used for reference or aesthetic\n        purposes (e.g. satellite photos).\n\n        '\n-   '\"Raw\" Data': \"\\n\\n\\\"Raw\\\" data is yet to be processed, meaning it has yet to\\\n        \\ be manipulated by a human or computer. Received or collected data could\\\n        \\ be in any number of formats, locations, etc.. It could be in any of the\\\n        \\ forms listed in the previous section.  \\n\\nBut \\\"raw\\\" data is a relative\\\n        \\ term, inasmuch as when one person finishes processing data and presents\\\n        \\ it as a finished product, another person may take that product and work\\\n        \\ on it further, and for them that data is \\\"raw\\\" data. \\n\\n#\\n\\n- Johanna\\\n        \\ Drucker's [Humanities Approaches to Graphical Display](http://www.digitalhumanities.org/dhq/vol/5/1/000091/000091.html)\\n\"\n-   Regular Expressions: '\n\n\n        A powerful way to match text in a document, with a sequence of characters\n        that define a search pattern.\n\n\n        #\n\n\n        - [Interactive tutorial for Regular Expressions](https://regexone.com/)'\n-   Remote: '\n\n\n        *remote* - An adjective describing a computer that is somewhere else. A \"remote\n        machine\" is a machine you do not have physical access to, but might have access\n        through a means such as the internet. In Git, a remote is a repository that\n        is not on your computer, but is connected to your local repository. You can\n        add new remotes with the `git remote add` command, and change them with the\n        `gitremote set-url` command.\n\n        '\n-   REPL: \"\\n\\nREPL stands for Read, Eval, Print, Loop. It is also known as the Python\\\n        \\ Interpreter or Interactive Shell, and it refers to a Python environment\\\n        \\ that processes your code as soon as you press enter. First, it **Reads**\\\n        \\ your code, then **Evaluates** what you wrote, then **Prints** the result\\\n        \\ (if there is a result), and finally **Loops** back to the initial prompt,\\\n        \\ allowing the user to start the loop again. \\n\\nThe REPL is useful for testing\\\n        \\ code on the fly, seeing if it works or what will happen. Since the REPL\\\n        \\ doesn't save your data after each session, though, you need a text editor\\\n        \\ to write and save longer scripts. Think of the REPL as a sandbox or playpen\\\n        \\ for exploring Python commands and expressions in the moment. \\n\\nTo use\\\n        \\ the REPL, just type `python` into your interpreter. You'll know you're there\\\n        \\ when you see the three `>>>`. To get out of the REPL, press `control-d`\\\n        \\ or type `quit()`. \\n\\n\\n\\nSee this beginner's tutorial on the [REPL](https://pythonprogramminglanguage.com/repl/)\\\n        \\ from Learn Python.\\n\\n\\n\\nCheck out this intermediate article on the [REPL](https://codewith.mu/en/tutorials/1.0/repl)\\\n        \\ and what it can do on Code With Mu.\\n\"\n-   Repository: '\n\n\n        Git uses the term repository to refer to a folder that is being tracked. Colloquially,\n        this term is often shortened to \"repo\".\n\n\n\n\n        - [About Repositories](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repositories).\n        Writing on GitHub.\n\n        '\n-   requests: \"\\n\\nThe requests module or requests library allows users to make requests\\\n        \\ to web pages. It is a useful tool for web scraping, and though it's relatively\\\n        \\ easy to get started, the learning curve can be steep. \\n\\nTo use requests,\\\n        \\ import the module into your script, then set up a response object. In the\\\n        \\ parenthesis, include the URL of the webpage you want to scrape, enclosed\\\n        \\ by single quotes.\\n\\n```pycon\\nimport requests\\nx = requests.get('<websiteURL>')\\n\\\n        ```\\n\\n\\n\\n- Read the [official docs](https://requests.readthedocs.io/en/master/)\\\n        \\ for the requests module.\\n\\n\\n\\n- Follow the [quickstart tutorial](https://requests.readthedocs.io/en/master/user/quickstart/)\\\n        \\ on the official docs.\\n\"\n-   Resolution: '\n\n\n        the scale at which the data is aggregated and displayed. For raster data this\n        will be the size of the pixel. For vector data it is referring to the scale\n        or mapping unit (e.g. neighborhood level, city level, state level, etc).\n\n        '\n-   Respect for persons: '\n\n\n        A core principle in *the Belmont Report* that stipulates that \"individuals\n        should be treated as autonomous agents, and second, that persons with diminished\n        autonomy are entitled to protection.\" A key concern when applying this principle\n        is *informed consent* (source: [The Belmont Report](https://www.hhs.gov/ohrp/regulations-and-policy/belmont-report/index.html#xbasic).\n\n        '\n-   Root: \"\\n\\nThe root is the top-level directory of a [filesystem](filesystem.md).\\\n        \\ Staying with the tree metaphor to represent a hierarchical structure, if\\\n        \\ the root is the starting point, the folders are the tree\\u2019s branches,\\\n        \\ and thee files are the leaves. Please note that \\u201Croot\\u201D is also\\\n        \\ often used as a synonym for the administrative user on a system. \"\n-   Root Element: \"\\n\\nThe root element is used in HTML to denote the outermost element\\\n        \\ that organizes all the content of an HTML document. For example, in the\\\n        \\ code below, `<html lang=\\\"en\\\">` denotes the opening tag of the root element\\\n        \\ and `</html>` denotes the closing tag of the root element. \\n\\n```html\\n\\\n        <!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n\\n  <head>\\n      ...\\n  </head>\\n\\n\\\n        \\  <body>\\n      ...\\n  </body>\\n\\n</html>\\n```\"\n-   Scripts: \"\\n\\nA Python script is a file that contains Python code. The filename\\\n        \\ needs to have the extension `.py`. Generally, in order to run the file,\\\n        \\ the user needs to call the script from the Python interpreter. \\n\\n\\n\\n\\\n        - Check out [how to run a Python script](https://www.geeksforgeeks.org/how-to-run-a-python-script/)\\\n        \\ on Geeks for Geeks.\\n\"\n-   'Shapefile ': '\n\n\n\n        There are two types of geographic data--vector data (points, lines, and polygons)\n        and raster data (pixels). The most common way that vector data is stored is\n        in the format of a shapefile. Therefore, a shapefile is a file type that stores\n        vector data.\n\n        '\n-   '\"Situated ethics\"': '\n\n\n        \"Situated ethics,\" here, refers to the notion that a person''s understandings\n        of and commitments to ethics or morality are greatly linked to their own experiences,\n        positionalities, and political orientations. Note that this understanding\n        of \"situated ethics\" is an application of Donna Haraway''s idea of \"situated\n        knowledges\" (1988) to the arena of ethical perspectives.\n\n        '\n-   sort(): '\n\n\n        `stort()` is a method that sorts the items from a list in alphabetical order.\n\n\n\n\n        - Check out these examples for using [`sort()`](https://www.w3schools.com/python/ref_list_sort.asp)\n        from w3schools.\n\n        '\n-   Spatial Join: \"\\n\\na GIS operation that affixes data from one feature layer's\\\n        \\ attribute table to another from a spatial perspective. Spatial joins begin\\\n        \\ by selecting a target feature and comparing it spatially to other feature\\\n        \\ layers. \\n\\nThere are two types of spatial joins--*spatial join by attribute*\\\n        \\ and *spatial join by location*. Both of them are ways that the mapping software\\\n        \\ will let you add data from one map layer or file to another map layer. A\\\n        \\ *spatial join by attribute* is used when you want to join non-spatial data,\\\n        \\ such as a text file, to spatial data, such as a shapefile. A *spatial join\\\n        \\ by location* is used when you want to join two layers of spatial data (e.g.\\\n        \\ a points layer to a polygon layer). \\n\"\n-   SQL: '\n\n\n        SQL stands for Structured Query Language, and is a programming language for\n        interacting with data in a relational database.\n\n        '\n-   SQLite: '\n\n\n        SQLite is one implementation of SQL, which requres less work, operates on\n        regular text files and does not require a server connection unlike other implementations\n        such as PostgreSQL and MySQL.\n\n        '\n-   Stemming: '\n\n\n        A process of collapsing words in an attempt to reduce the number of words,\n        and get a realistic understanding of the meaning of a text. Stemming cuts\n        off affixes to find the root (or the stem) of the word. See \"lemmatization\"\n        in this glossary for another process of collapsing words in a corpus.'\n-   Stop Words: '\n\n\n        Words that appear frequently in a language, often adding grammatical structure,\n        but little semantic content.'\n-   string: '\n\n\n        A data type in Python that represents a sequence of alphanumeric and/or special\n        characters enclosed within single or double quotes.\n\n\n        For example, the following are all strings:\n\n\n        `\"hello world!\"`\n\n        `\"The answer is 3\"`\n\n        `\"!!!\"`\n\n\n\n\n        - Read more about [strings](https://www.w3schools.com/python/python_strings.asp)\n        on w3schools.\n\n        '\n-   Surveillance: '\n\n\n        Surveillance refers to \"the watch or guard kept over a person, etc., [especially]\n        over a suspected person, a prisoner, or the like; often, spying, supervision\"\n        or \"supervision for the purpose of direction or control\" (source: Oxford English\n        Dictionary online). Surveillance, per my understanding, includes research\n        (including *\"big data\"* research) of people''s personal digital data that\n        is conducted without their informed consent, as well as businesses'' or governments''\n        uses of various programs and devices to record or listen to people''s behaviors,\n        data, voices etc.\n\n        '\n-   Syntax Errors: \"\\n\\nAlong with traceback errors, syntax errors are a common type\\\n        \\ of error in Python code. It appears when Python is unable to understand\\\n        \\ a line of code, meaning that there is a mistake. Often, syntax errors point\\\n        \\ to typos, indentation, or incomplete expressions, like missing quotation\\\n        \\ marks or parentheses. \\n\\nWhen a syntax error occurs, the interpreter will\\\n        \\ display a caret pointing to the area where the error occured. It will also\\\n        \\ display the message: `SyntaxError: invalid syntax`. Take a close look at\\\n        \\ the display message to get more information about your error, and help you\\\n        \\ with debugging.\\n\\n\\n\\n- See a fuller description of [syntax errors](https://geek-university.com/python/syntax-and-logical-errors/)\\\n        \\ on Geek University. \\n\\n- To see [a comprehensive list of possible errors](https://www.tutorialsteacher.com/python/error-types-in-python),\\\n        \\ check out this resource on Tutorials Teacher.\\n\"\n-   Tag: '\n\n\n        Tags are used in HTML to apply elements. Tags are contained within `<   >`\n        symbols.  '\n-   Text Normalization: '\n\n\n        The process of taking a list of words and transforming it into a more uniform\n        sequence.'\n-   \"Text editor\\_\": '\n\n\n        A program for creating and editing plain text files. Unlike word processors\n        such as LibreOffice and Word, which create complex documents in the form of\n        archives that include formatting information and other metadata, a plain text\n        editor creates a single file. Programmers tend to use plain text files because\n        computers can work with them easily. Sublime Text, Nano, and VI are examples\n        of text editors.\n\n        '\n-   Tidy Data: '\n\n\n        Tidy data are a way of processing and organizing data in to a data structure\n        that follows these rules:\n\n\n        1. Each variable is in a column.\n\n        2. Each observation is a row.\n\n        3. Each value is a cell.\n\n\n        #\n\n\n        - [Tidy Data](https://www.jstatsoft.org/article/view/v059i10)'\n-   Token: '\n\n\n        An instance of a type (see \"type\" in this glossary).'\n-   Tokenizing: '\n\n\n        A process of breaking text into individual linguistic units. This process\n        often involves removing punctuation and making all words lowercase. '\n-   Traceback Errors: \"\\n\\nAlong with syntax errors, traceback errors are a common\\\n        \\ type of error in Python code. It appears during the execution of the code,\\\n        \\ when Python is unable to continue, meaning that there is a problem with\\\n        \\ the flow of your program. Often, traceback errors point to undefined variables\\\n        \\ or functions.\\n\\nWhen a traceback error occurs, the interpreter will give\\\n        \\ you a little more information about the error. If it's a name error, that\\\n        \\ means that something is not defined properly. If it's a type error, that\\\n        \\ means that an operation or function is of the wrong type. Take a close look\\\n        \\ at the display message to get more information about your error, and help\\\n        \\ you with debugging.\\n\\n\\n\\n- See a fuller description of [traceback errors](https://realpython.com/python-traceback/)\\\n        \\ on Real Python. \\n\\n- To see [a comprehensive list of possible errors](https://www.tutorialsteacher.com/python/error-types-in-python),\\\n        \\ check out this resource on Tutorials Teacher.\\n\"\n-   Tuples: '\n\n\n        A collection which is ordered and unchangeable. In Python tuples are written\n        with parenthesis.'\n-   type(): '\n\n\n        **Python**\n\n\n        `type()` is a function that evaluates the data type of the object within the\n        parenthesis. For a string `\"hello world\"`, it will return: `<str>`; for an\n        integer `5`, it will return `<int>` and so on.\n\n\n        **Text analysis**\n\n\n        In our text analysis workshop, `type` means unique vocabulary items in a corpus.\n        (Ex: \"Whale\" and \"whale\" are different *types*.)\n\n\n\n\n        - Read more about [`type()`](https://www.programiz.com/python-programming/methods/built-in/type)\n        as a Python command, and more things it can calculate.\n\n        '\n-   Universal design: '\n\n\n        Universal design refers to \"the process of creating products that are usable\n        by people with the widest possible range of abilities, operating within the\n        widest possible range of situations\" (source: [Shawn Lawton Henry, et al.\n        2014](https://dl.acm.org/citation.cfm?doid=2596695.2596719)).\n\n        '\n-   Variables: \"\\n\\nA variable is a name that is assigned to a value, and it stores\\\n        \\ data for future use. Variable assignment uses a single `=`. The name given\\\n        \\ is on the left of the `=`, the value is on the right of the `=`.\\t\\n\\nAssignment\\\n        \\ looks like this:\\n\\n```python\\nx = 3\\nname = \\\"Patrick\\\"\\nname2 = \\\"Ignatz\\\"\\\n        \\ngrocery_list = [\\\"tomato\\\", \\\"limes\\\", \\\"chocolate\\\"]\\n```\\n\\n\\n\\n- Learn\\\n        \\ more about [variables](https://www.w3schools.com/python/python_variables.asp)\\\n        \\ on w3schools.\\n\"\n-   Vector: '\n\n\n        A scalable point, line or polygon that can be easily created, edited, or deleted\n        using GIS. Does not have a specific resolution. In QGIS, vectors are contained\n        in vector layers, that can only contain a single type of vectors. Each vector\n        represents a single feature, although some features may be represented by\n        more than one vector (e.g. the vector of the United States includes the mainland\n        U.S. polygon but also polygons for Alaska and Hawaii).\n\n        '\n-   Version Control: \"\\n\\nVersion control is a system that records changes to a file\\\n        \\ or set of files over time so that you can recall specific versions later.\\\n        \\ It allows you to revert selected files back to a previous state, revert\\\n        \\ the entire project back to a previous state, compare changes over time,\\\n        \\ see who last modified something that might be causing a problem, who introduced\\\n        \\ an issue and when, and more. \\n\\nUsing a version control software like Git\\\n        \\ generally means that if you screw things up or lose files, you can easily\\\n        \\ recover. In addition, you get all this for very little overhead.\\n\\n#\\n\\n\\\n        - Bryan, J. (2017). _[Excuse me, do you have a moment to talk about version\\\n        \\ control?](https://doi.org/10.7287/peerj.preprints.3159v2)_ PeerJ Preprints.\\n\\\n        \\n#\\n\\n- [Getting Started - About Version Control](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control).\\\n        \\ Git documentation. \\n\"\n-   Web Hosting: '\n\n\n        Web Hosting refers to servers that make HTML '\n-   while loops: \"\\n\\nLike for loops, while loops are a way of going through items\\\n        \\ in a list. The difference is that while loops will continue to execute as\\\n        \\ long as a certain condition is true. To get out of the loop, use the break\\\n        \\ command, or type `control-c` or `quit()` in the interpreter. Otherwise,\\\n        \\ the loop will keep going.\\n\\n```python\\nwhile True:\\n    print(\\\"Oh no!\\\n        \\ I'm stuck...\\\")\\n```\\n\\n\\n\\n- Check out this demonstration of [while loops](https://www.w3schools.com/python/python_while_loops.asp)\\\n        \\ on w3schools.\\n\"\n-   XML (file format): \"\\n\\nXML or eXstensible Markup Language is a file format that\\\n        \\ uses a nested structure where the \\\"tags\\\" like `<Cat>` contain other tags\\\n        \\ inside them, like `<firstName>`. This format is good for organizing the\\\n        \\ layout of a document in a tree-like format, just like HTML, where we want\\\n        \\ to nest elements like a sentence within a paragraph, for example. XML does\\\n        \\ not carry any information about how to be displayed and can be used in a\\\n        \\ variety of presentation scenarios. \\n\\n```xml\\n<Cats> \\n    <Cat> \\n   \\\n        \\     <firstName>Smally</firstName> \\n        <lastName>McTiny</lastName>\\\n        \\ \\n    </Cat> \\n    <Cat> \\n        <firstName>Kitty</firstName> \\n     \\\n        \\   <lastName>Kitty</lastName> \\n    </Cat> \\n    <Cat> \\n        <firstName>Foots</firstName>\\\n        \\ \\n        <lastName>Smith</lastName> \\n    </Cat> \\n    <Cat> \\n       \\\n        \\ <firstName>Tiger</firstName> \\n        <lastName>Jaws</lastName> \\n    </Cat>\\\n        \\ \\n</Cats> \\n```\"\n","slug":"glossary.yaml"},"GUI ":{"GUI ":"# GUI \n\n\"Graphical User Interface,” pronounced \"gooey.” It’s a system of interactive visual components for computer software… basically, anything on a computer that isn't in the command line. All familiar elements of day-to-day computer tasks such as images, windows, prompts, buttons, and progress bars are part of the GUI. The way most people interact with computers. Some tasks can only be done in a GUI, while others can only be done in the command line.\n","slug":"gui"},"Hegemony":{"Hegemony":"# Hegemony\n\nAntonio Gramsci's concept of hegemony refers to “the ability of a dominant group to create [majority] consent and agreement [around a particular system of meanings] within a population without the use or threat of force” (source: Kenneth Guest, *Cultural Anthropology: A Toolkit for a Global Age*, 2014, page 52). Hegemony is one way of understanding how dominant forms of knowledge and power produce and reinforce each other.\n","slug":"hegemony"},"High Quality Data":{"High Quality Data":"# High Quality Data\n\nHigh quality data is often understood as valid, accurate, complete, consistent, and uniformed. This is often achieved through the cleaning process. \n\nMeasurements are valid when they conform to set constraints. They are accurate when they represent the correct values (often requiring cross-referencing trusted external sources). They are complete when they represent everything that might be known and are consistent when observations do not contradict each other. Measurements are uniform when the same unit of measure is used in all relevant measurements.  ","slug":"high-quality-data"},"HTML":{"HTML":"# HTML\n\nHTML (Hypertext Markup Language) is a markup language used to write web-based documents. It enables us to provide web browsers with information about the _content_ of a document. We can, for example, indicate that some part of our document is a paragraph, image, heading, or link. The browser uses this information when displaying the document for users.","slug":"html"},"Human subjects":{"Human subjects":"# Human subjects\n\nA human subject refers to \"a living individual about whom an investigator (whether professional or student) conducting research obtains (1) data through intervention or interaction with the individual, or (2) identifiable private information\" (source: [HHS.gov](https://www.hhs.gov/ohrp/regulations-and-policy/regulations/45-cfr-46/index.html)). However, according to [the AoIR Ethics Working Committee's 2012 report](http://aoir.org/reports/ethics2.pdf), \"The definition of ‘human subject’ has become, unfortunately, a litmus test for whether or not one needs to undergo ethical review before conducting research... ‘human subject’ has never been a good fit for describing many internet-based research environments.\"\n","slug":"human-subjects"},"ID":{"ID":"# ID\n\nID is an attribute used in HTML and CSS to create unique identifiers. IDs facilitate fine-grained styling of websites by allowing us to select and access unique elements.","slug":"id"},"":{"":"\n# Shapefile \n\nThere are two types of geographic data--vector data (points, lines, and polygons) and raster data (pixels). The most common way that vector data is stored is in the format of a shapefile. Therefore, a shapefile is a file type that stores vector data.\n","slug":"shapefile"},"Impact approach":{"Impact approach":"# Impact approach\n\nAn impact approach to doing ethical research is based on the assumption that all research has impacts and thus a researcher should be critical and intentional with what sorts of impacts they aim for or expect to result, and take personal responsibility for the effects of their research methods (source: [Annette Markham 2016](http://annettemarkham.com/2016/05/okcupid-data-release-fiasco-its-time-to-rethink-ethics-education/)). Markham focuses on three levels of impact: direct impacts on people, the ramifications of (re)producing categories, and social, political and economic effects.\n","slug":"impact-approach"},"Inferential Analysis":{"Inferential Analysis":"# Inferential Analysis\n\nInferential analysis are techniques geared towards testing a hypothesis about a population, based on your data set, such as:\n\n- Extrapolation\n- P-Value calculation\n","slug":"inferential-analysis"},"input()":{"input()":"# input()\n\nThe `input()` function asks the user for an input. It prompts the user to enter input through the keyboard and saves it. This function enables programs to respond to user input. For example, it can ask for the user's name and print the name The input function can take a prompt within the parenthesis, which it will use to prompt the user to enter the input. \n\nFor example: \n\n```pycon\n>>> name = input(\"Enter your name here: \")\nEnter your name here: Filipa\n>>> name\n'Filipa'\n```\n\n# Readings\n\n- Detailed article on [`input()`](https://stackabuse.com/getting-user-input-in-python/) from Stack Abuse.\n\n# Tutorials\n\n- Check out the [`input()`](https://www.w3schools.com/python/ref_func_input.asp) tutorial on w3schools. \n","slug":"input"},"Institutional Review Board (IRB)":{"Institutional Review Board (IRB)":"# Institutional Review Board (IRB)\n\nAn institutional body (a designated group of people) that is intended to provide oversight, administrative support, and educational training to ensure that research with human subjects done by researchers of that institution complies with federal and state regulations, and university or institutional policy. Every university or research institution must, legally, have its own or an affiliated IRB.\n","slug":"institutional-review-board"},"integer":{"integer":"# integer\n\nAn integer is a data type, like string, list, boolean, and float. It signifies any value that is a whole number. You can check if a value is an integer with the `type()` function, passing the value as an argument within the parenthesis. \n\n","slug":"integer"},"Spatial join by attribute ":{"Spatial join by attribute ":"# Spatial join by attribute \n\nis based on adding the attributes from one layer to another based on a shared attribute or variable.\n","slug":"joinbyattribute"},"Spatial Join by location":{"Spatial Join by location":"# Spatial Join by location\n\nis when you have two shapefiles that you want to combine based on where the features are located on the map. For example if you have a map of US states and you want to add information about its cities, you can run a spatial join by location.\n","slug":"joinbylocation"},"JSON (file format)":{"JSON (file format)":"# JSON (file format)\n\nJSON or JavaScript Object Notation, also uses a nesting structure, but with the addition of \"key/value\" pairs, like the firstName key which is tied to the `Smally` value (at least for the first cat!). JSON is popular with web applications that save and send data from your browser to web servers, because it uses the main language of web browsers, JavaScript, to work with data.\n\n```json\n{\n    \"Cats\": [ \n        {\n            \"firstName\": \"Smally\",\n            \"lastName\": \"McTiny\"\n        }, \n        {\n            \"firstName\": \"Kitty\",\n            \"lastName\": \"Kitty\"\n        },\n        {\n            \"firstName\": \"Foots\",\n            \"lastName\":\"Smith\"\n        }, \n        {\n            \"firstName\": \"Tiger\",\n            \"lastName\":\"Jaws\"\n        } \n    ]\n} \n```","slug":"json"},"Jupyter Notebook":{"Jupyter Notebook":"# Jupyter Notebook\n\nThe Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text.\n\n## Readings\n\n- [Jupyter Notebook Documentation](https://jupyter.org/documentation)\n\n## Tutorials\n\n- [Jupyter Notebook Tips and Tricks](https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/)","slug":"jupyter-notebook"},"Justice":{"Justice":"# Justice\n\nA core principe in *the Belmont Report* that stipulates that researchers should justly distribute the burdens and benefits of the research studey: \"(1) to each person an equal share, (2) to each person according to individual need, (3) to each person according to individual effort, (4) to each person according to societal contribution, and (5) to each person according to merit.\" A key concern when applying this principle is the *selection of subjects*, that is, the fair recruitment and selection of research subjects (source: [The Belmont Report](https://www.hhs.gov/ohrp/regulations-and-policy/belmont-report/index.html#xbasic).\n","slug":"justice"},"Layers":{"Layers":"# Layers\n\nLayers are \"containers\" of the data in QGIS. On the map view, layers can be imagined as transparent film sheets that are laid one over another. With the exception of raster layers, each layer contains an Attribute Table, that is, a series of features that in turn have their own attributes. Vector layers can only contain one type of vectors, be it: points, lines or polygons.\n","slug":"layers"},"Lemmatization":{"Lemmatization":"# Lemmatization\n\nA process of collapsing words in an attempt to reduce the number of words, and get a realistic understanding of the meaning of a text. Lemmatization references the word and finds the appropriate root and can therefore take longer than other processes of collapsing words. See \"stemming\" in this glossary for another process of collapsing words in a corpus.","slug":"lemmatization"},"len()":{"len()":"# len()\n\n`len()` is a function that calculates the length of the object within the parenthesis. For a string, it will count the number of characters: `len(\"hello\")` will return `5`, and `len(\"hi there\")` will return `8`, because it counts blank spaces. For a list, `len()` will count the number of list items: \n\n```pycon\n>>> groceries = [\"berries\", \"bananas\", \"oat milk\", \"eggs\", \"spinach\", \"bell peppers\", \"ice cream\", \"frozen pizza\", \"floss\", \"hand soap\"]\n>>> len(groceries)\n10\n```\n\n# Readings\n\n- Read more about [`len()`](https://www.programiz.com/python-programming/methods/built-in/len) and more things it can calculate.\n\n# Tutorials\n\n- Check out [`len()`](https://www.w3schools.com/python/ref_func_len.asp) on w3schools.\n","slug":"len"},"Lexical Density":{"Lexical Density":"# Lexical Density\n\nThe number of unique words per total words; a good metric to approximate lexical diversity—the range of vocabulary an author uses.","slug":"lexical-density"},"Library":{"Library":"# Library\n\nA Python library is a reusable piece of code / sets of instructions that you use in your script.\n\n","slug":"library"},"list":{"list":"# list\n\nA list is a data type, like string, integer, float, and Boolean. A list holds items in a sequence, separated by commas and contained within square brackets. They can hold different types of data, like strings, integers, floats, etc. Items within a list can be accessed by list indexing or slicing. \n\n# Tutorials\n\n- Read more about how to use [lists](https://www.programiz.com/python-programming/list) on Programiz. \n","slug":"list"},"list indexing":{"list indexing":"# list indexing\n\nList indexing is a foundational tool for working with lists. It allows one to access items from a list by specifying the item according to its location within the list. The item location is represented the number within brackets. In a list index, the count starts at 0, so the first item is accessed by `list[0]` and the second item by `list[1]`, the third item by `list[2]`, and so on. \n\n# Readings\n\n- Check out this article about [list indexing](https://towardsdatascience.com/the-basics-of-indexing-and-slicing-python-lists-2d12c90a94cf) on Medium, which also covers slicing lists.\n","slug":"list_indexing"},"lower()":{"lower()":"# lower()\n\n`lower()` is a string method for making all of the letters within a string into lowercase letters. It uses the dot syntax `.` for creating the expression. For example, \"HEllO\" can be transformed into lowercase by running `\"HELLO\".lower()`, which will return the string `'hello'`. \n\n# Readings\n\n- Read about `lower()` and related methods like `upper()`, `isupper()` and `islower()` on [Geeks for Geeks](https://www.geeksforgeeks.org/isupper-islower-lower-upper-python-applications/).\n\n# Tutorials\n\n- See how to use [`.lower()`](https://www.w3schools.com/python/ref_string_lower.asp) on w3schools.\n","slug":"lower"},"Machine Learning":{"Machine Learning":"# Machine Learning\n\nMachine Learning is the study of computer algorithms that improve automatically through experience.\n\n","slug":"machine-learning"},"Markdown":{"Markdown":"# Markdown\n\nMarkdown is the language used to format the plain text files in your Git-enabled repository. Its also called a markup language, like HTML. Both languages add markers to plain text to style and organize the text of a document.\n\nIn HTML:\n\n```html \n<h1> Heading 1 </h1>\n```\n\nIn Markdown:\n\n```md\n# Heading 1\n```\n\nWhereas you use HTML and CSS with WordPress, you use Markdown with Git and GitHub. Markdown has fewer options for marking text than HTML. It was designed to be human-readable, meaning easy to write and edit. \n\n## Readings\n\n- Coll, S. (2017). [Markdown for Students and Academics](https://www.simondcoll.com/markdown-students-academics/).\n- Ovadia, S. (2014). [Internet Connection: Markdown for Librarians and Academics](https://academicworks.cuny.edu/cgi/viewcontent.cgi?article=1006&context=lg_pubs)\n\n## Tutorials\n\n- [Mastering Markdown](https://guides.github.com/features/mastering-markdown/). GitHub Guides.\n\n## Cheat Sheet\n\n- Adam Pritchard's [Markdown Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) is a great resource if you need a quick overview of what features are available in Markdown.\n- The Markdown Guide, a free and open-source reference guide to Markdown, features a [Markdown Cheat Sheet](https://www.markdownguide.org/cheat-sheet) on their website.\n","slug":"markdown"},"Markup":{"Markup":"# Markup\n\nMarkup languages allow you to format things, whether they're documents, posters, or websites. HTML is a markup language, as is LaTeX.\n\n## Readings \n\n- [WP-Amelia, Mark-Up Languages](https://wpamelia.com/markup-languages/)\n- [W3C HTML homepage](https://www.w3.org/html/)\n","slug":"markup"},"Matplotlib":{"Matplotlib":"# Matplotlib\n\nMatplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.\n\n## Readings\n\n- [Matplotlib User's Guide](https://matplotlib.org/users/index.html)\n\n","slug":"matplotlib"},"Merge conflict":{"Merge conflict":"# Merge conflict\n\nIf, when attempting to merge, there is a line that has been changed by both parties, you will experience a merge conflict. This means that Git needs your manual intervention to decide which of the two changes will be the canonical or accepted change. A merge conflict is resolved by editing the conflicting files with a text editor, then adding and committing to resolve the merge.  \n","slug":"merge-conflict"},"Merging":{"Merging":"# Merging\n\nIf you've advanced the timeline of a repository by making commits, and someone else has advanced the timeline of a remote version of the repository, when you attempt to pull in the remote changes you will be prompted to merge the two timelines. In most cases this is an automatic process that reconciles the two timelines.  \n","slug":"merging"},"Metadata":{"Metadata":"# Metadata\n\nAny data that describes your book: title, subtitle, author bio, book description, price, publication date, ISBN, etc.","slug":"metadata"},"Method":{"Method":"# Method\n\nA method in Python is similar to a function, in that it allows us to do things with data. However, a method is attached to what we call an *object*, which is a representation of data. Accordingly, a method operates as a function that is specifically available for that object. \n\nMethods are accessed through the dot syntax `.`.  For example, the method `lower()` can be attached to a string object like so: `\"HELLO\".lower()` and will return the string `'hello'`. \n\n# Readings\n\n- Read about [the difference between a method and a function](https://www.tutorialspoint.com/difference-between-method-and-function-in-python) on Tutorials Point.\n\n- If you know something about [classes](https://www.w3schools.com/python/python_classes.asp) and are ready to jump deeper into Object Oriented Programming, you can learn more about [methods and classes](https://data-flair.training/blogs/python-method/) on Data Flair. \n","slug":"method"},"Modules":{"Modules":"# Modules\n\nA module is a python file (like a script) that contains a number of functions and expressions that you want to include in your program. Programmers often import modules written by other programmers and use them like building blocks for their applications. \n\nIn order to use modules, you need to add them to your script with `import` and then indicate which function you want to use with the dot syntax `.`. For example, we might use the function `choice` from the [`random`](https://docs.python.org/3/library/random.html) module, to generate random numbers. \n\n```pycon\n>>> import random\n>>> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> random.choice(numbers)\n1\n>>> random.choice(numbers)\n3\n>>> random.choice(numbers)\n3\n>>> random.choice(numbers)\n1\n>>> random.choice(numbers)\n4\n>>> random.choice(numbers)\n9\n```\n\n# Readings\n\n- An in depth explanation of [modules](https://docs.python.org/3/tutorial/modules.html) from the Python docs. \n\n# Tutorials\n\n- A step-by-step tutorial on w3schools that demonstrates [how modules are composed](https://www.w3schools.com/python/python_modules.asp). \n","slug":"module"},"The National Commission for the Protection of Human Subjects of Biomedical and Behavioral Research":{"The National Commission for the Protection of Human Subjects of Biomedical and Behavioral Research":"# The National Commission for the Protection of Human Subjects of Biomedical and Behavioral Research\n\nA commission created as a result of the National Research Act of 1974, \"charged with identifying the basic ethical principles that should underlie the conduct of biomedical and behavioral research involving human subjects and developing guidelines to assure that such research is conducted in accordance with those principles\" (source: [HHS.gov](https://www.hhs.gov/ohrp/regulations-and-policy/belmont-report/index.html).\n","slug":"national-commission-for-the-protection-of-human-subjects-of-biomedical-and-behavioral-research"},"NLTK":{"NLTK":"# NLTK\n\nThe Natural Language Toolkit (NLTK) is platform for Python for working with human language data.\n\n## Readings\n\n- [The NLTK Documentation](http://www.nltk.org/)","slug":"nltk"},"Objects":{"Objects":"# Objects\n\nEven though you probably don't know it, you've been using objects in Python all along. Nearly everything in Python is made out of objects, which are representations of values. For example, the string `\"hello\"` is an object. So is the variable `greeting` that stores `\"hello\"`. Integers, floats, and lists are also objects. \n\nTo help you do more complex things with objects, you can learn *object-oriented-programming*, which is an approach toward programming that centralizes objects. This approach deploys what we call *classes* to define and create new objects, as well as *inheritance* to build new objects from old ones. This is definitely intermediate stuff, so make sure you have a grasp on basic concepts like data types, variables, loops, and conditionals before moving onto object-oriented-programming. \n\n# Readings\n\n- [This thread](https://stackoverflow.com/questions/56310092/what-is-an-object-in-python) from Stack Overflow does a good job what objects are from a beginner's point of view. \n\n# Tutorials\n\n- If you want to get your feet wet with a little object-oriented-programming, check out this [objects and classes](https://www.learnpython.org/en/Classes_and_Objects) tutorial on w3schools.\n","slug":"object"},"Open Data Formats":{"Open Data Formats":"# Open Data Formats\n\nOpen data formats are file formats that are available to anyone, free of charge, which allows for accessibility, future-proofing, and preservation. These file formats also allow for easy reusability and aids research reproduction and accountability. They are not limited by intellectual property rights or copyrights. This is distinct from proprietary formats. Some examples of open data formats are `.csv`, `.pdf`, and `.json`.\n\n## Readings\n\n- Library of Congress [Recommended Formats Statement](https://www.loc.gov/preservation/resources/rfs/)\n- Stanford University's [best practices for file formats](https://library.stanford.edu/research/data-management-services/data-best-practices/best-practices-file-formats)\n","slug":"open-data-formats"},"Origin":{"Origin":"# Origin\n\nIn Git, the default remote repository. When you clone a remote repository—that is, make a local reposotry based on it—the remote repository is automatically added as \"origin.\"\n","slug":"origin"},"part-of-speech (POS) tagging":{"part-of-speech (POS) tagging":"# part-of-speech (POS) tagging\n\nA way to identify the category of words in a given text. For a list of POS classification, see the [Penn Tree Bank Tag Set](https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html)\n\n","slug":"part-of-speech"},"Path ":{"Path ":"# Path \n\nA list of folders on your system that are checked for programs to generate the list of commands available on the command line. For example, since the folder `/bin` is typically on the path, putting an executable program in that folder will make it available as a command.\n","slug":"path"},"Personhood":{"Personhood":"# Personhood\n\nPersonhood is \"the quality or condition of being a person; [especially] personal identity, selfhood\" (Oxford English Dictionary online). When doing internet or digital research, it is important to consider how a person's data, avatar, images, videos, audio files, social media and other forms of digital information may be understood as an expression of their personhood (source: [the AoIR Ethics Working Committee's 2012 report](http://aoir.org/reports/ethics2.pdf).\n","slug":"personhood"},"Phatic Language":{"Phatic Language":"# Phatic Language\n\nPhatic language is language primarily for communicating social closeness. Phatic words stand in contrast to semantic words, which contribute meaning to the utterance.\n","slug":"phatic-language"},"Policing the crisis":{"Policing the crisis":"# Policing the crisis\n\nStuart Hall et al.'s concept of \"policing the crisis\" refers to the unnatural process by which certain actions (by certain people) become and continue to be understood, reported, policed, and sanctioned as a type of \"crime.\" The police, the judicial system, and mainstream media \"are actively and continuously part of [this] whole process\" (source: Stuart Hall et al., Policing the Crisis, 2013 [1978], page 54.\n","slug":"policing-the-crisis"},"Polygon":{"Polygon":"# Polygon\n\na figure with three or more sides. In GIS, it usually refers to complex areas outlining lakes, city blocks, a set of buildings, or other complex features of the map, that can be outlined using interconnected points. A polygon can have an unlimited amount of points. The more points (or \"higher the resolution\"), the smoother the polygon will look to the human eye.\n","slug":"polygon"},"pop()":{"pop()":"# pop()\n\n`pop()` is a method that removes the last item from a list.\n\n# Tutorials\n\n- Check out these examples for using [`pop()`](https://www.w3schools.com/python/ref_list_pop.asp) from w3schools.\n","slug":"pop"},"print()":{"print()":"# print()\n\n`print()` is a function that \"prints\" or displays whatever is inside the parentheses in the terminal window.\n\nFor example, running `print(\"Hello World!\")` will output the string `'Hello World'` to the terminal window.\n\n# Tutorials\n\n- See the possibilities with [`print()`](https://www.w3schools.com/python/ref_func_print.asp) on w3schools.\n","slug":"print"},"Programming Language":{"Programming Language":"# Programming Language\n\nProgramming languages are used to transform data, by creating scripts that organize an output of data based on a particular input of data. Examples of programming languages include python and javascript.","slug":"programminglanguage"},"Proprietary Data Formats":{"Proprietary Data Formats":"# Proprietary Data Formats\n\nProprietary data file formats are file formats that rely on dedicated, licensed softwares and/or systems. These file formats are often copyrighted, patented, or have other restrictions placed on them, and often require a fee or a paid-for software to open. These file formats are usually discouraged in research projects, especially those with intentions to share with a wider public(s) and audience. This is distinct from open data formats. Some examples of it include .xslx, .doc, and .3ds. \n\n## Readings\n\n- Library of Congress [Recommended Formats Statement](https://www.loc.gov/preservation/resources/rfs/)\n- Stanford University's [best practices for file formats](https://library.stanford.edu/research/data-management-services/data-best-practices/best-practices-file-formats)","slug":"proprietary-data-formats"},"Pull Request":{"Pull Request":"# Pull Request\n\nA pull request is a set of proposed changes to a repository. If you wish to contribute to an open-source project, the most common method is by proposing changes through pull requests.  \n","slug":"pull-request"},"Pull":{"Pull":"# Pull\n\nAccepting and taking changes that were made to a remote repository, possibly by someone else, and updating your local repository to match.  \n","slug":"pull"},"Push":{"Push":"# Push\n\nWhen you push your files, or use the command `git push master origin`, you are communicating with GitHub to update the connected project folder stored there. You are pushing the changes, say, to your syllabus.md file stored on their servers which you access via your gitHub.com. \n\n## Tutorials\n\n- [Pushing commits to a remote repository](https://docs.github.com/en/github/using-git/pushing-commits-to-a-remote-repository). GitHub Writing.","slug":"push"},"Qualitative Analysis":{"Qualitative Analysis":"# Qualitative Analysis\n\nQualitative analysis are techniques geared towards understanding a phenomenon, rather than predicting and testing hypotheses, such as:\n\n- Grounded Theory/Computational Grounded Theory\n- Content Analysis\n- Text Analysis\n\n## Readings\n\n- [Computational Grounded Theory: A Methodological Framework](https://drive.google.com/file/d/0BxI6W5IIG74FeEtGbjQ0WF9uM0U/view)","slug":"qualitative-analysis"},"random":{"random":"# random\n\nThe random module or random library allows one to generate random output. The module is useful for to choose a random element from a list, or number from a range, or between two potential values (like True or False). \n\n# Readings\n\n- For a thorough description of the [random module](https://docs.python.org/3/library/random.html), check out the official documentation.\n\n# Tutorials\n\n- For step-by-step demonstration of [how to use random](https://www.pythonforbeginners.com/random/how-to-use-the-random-module-in-python), check out this tutorial from Python For Beginners. \n","slug":"random"},"Raster":{"Raster":"# Raster\n\nimages of a specific location that represent visually continuous data such as temperature and elevation at a given resolution. Higher resolutions mean more precision but also larger file size. Raster layers have no Attribute Table; the values are stored within the image and represented as different hues or colors. Raster images can also be used for reference or aesthetic purposes (e.g. satellite photos).\n","slug":"raster"},"\"Raw\" Data":{"\"Raw\" Data":"# \"Raw\" Data\n\n\"Raw\" data is yet to be processed, meaning it has yet to be manipulated by a human or computer. Received or collected data could be in any number of formats, locations, etc.. It could be in any of the forms listed in the previous section.  \n\nBut \"raw\" data is a relative term, inasmuch as when one person finishes processing data and presents it as a finished product, another person may take that product and work on it further, and for them that data is \"raw\" data. \n\n## Readings\n\n- Johanna Drucker's [Humanities Approaches to Graphical Display](http://www.digitalhumanities.org/dhq/vol/5/1/000091/000091.html)\n","slug":"raw-data"},"Regular Expressions":{"Regular Expressions":"# Regular Expressions\n\nA powerful way to match text in a document, with a sequence of characters that define a search pattern.\n\n## Tutorials\n\n- [Interactive tutorial for Regular Expressions](https://regexone.com/)","slug":"regular-expressions"},"Remote":{"Remote":"# Remote\n\n*remote* - An adjective describing a computer that is somewhere else. A \"remote machine\" is a machine you do not have physical access to, but might have access through a means such as the internet. In Git, a remote is a repository that is not on your computer, but is connected to your local repository. You can add new remotes with the `git remote add` command, and change them with the `gitremote set-url` command.\n","slug":"remote"},"Repository":{"Repository":"# Repository\n\nGit uses the term repository to refer to a folder that is being tracked. Colloquially, this term is often shortened to \"repo\".\n\n# Readings\n\n- [About Repositories](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repositories). Writing on GitHub.\n","slug":"repository"},"requests":{"requests":"# requests\n\nThe requests module or requests library allows users to make requests to web pages. It is a useful tool for web scraping, and though it's relatively easy to get started, the learning curve can be steep. \n\nTo use requests, import the module into your script, then set up a response object. In the parenthesis, include the URL of the webpage you want to scrape, enclosed by single quotes.\n\n```pycon\nimport requests\nx = requests.get('<websiteURL>')\n```\n\n# Readings\n\n- Read the [official docs](https://requests.readthedocs.io/en/master/) for the requests module.\n\n# Tutorials\n\n- Follow the [quickstart tutorial](https://requests.readthedocs.io/en/master/user/quickstart/) on the official docs.\n","slug":"requests"},"Resolution":{"Resolution":"# Resolution\n\nthe scale at which the data is aggregated and displayed. For raster data this will be the size of the pixel. For vector data it is referring to the scale or mapping unit (e.g. neighborhood level, city level, state level, etc).\n","slug":"resolution"},"Respect for persons":{"Respect for persons":"# Respect for persons\n\nA core principle in *the Belmont Report* that stipulates that \"individuals should be treated as autonomous agents, and second, that persons with diminished autonomy are entitled to protection.\" A key concern when applying this principle is *informed consent* (source: [The Belmont Report](https://www.hhs.gov/ohrp/regulations-and-policy/belmont-report/index.html#xbasic).\n","slug":"respect-for-persons"},"Root":{"Root":"# Root\n\nThe root is the top-level directory of a [filesystem](filesystem.md). Staying with the tree metaphor to represent a hierarchical structure, if the root is the starting point, the folders are the tree’s branches, and thee files are the leaves. Please note that “root” is also often used as a synonym for the administrative user on a system. ","slug":"root"},"Root Element":{"Root Element":"# Root Element\n\nThe root element is used in HTML to denote the outermost element that organizes all the content of an HTML document. For example, in the code below, `<html lang=\"en\">` denotes the opening tag of the root element and `</html>` denotes the closing tag of the root element. \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n  <head>\n      ...\n  </head>\n\n  <body>\n      ...\n  </body>\n\n</html>\n```","slug":"rootelement"},"Scripts":{"Scripts":"# Scripts\n\nA Python script is a file that contains Python code. The filename needs to have the extension `.py`. Generally, in order to run the file, the user needs to call the script from the Python interpreter. \n\n# Tutorials\n\n- Check out [how to run a Python script](https://www.geeksforgeeks.org/how-to-run-a-python-script/) on Geeks for Geeks.\n","slug":"scripts"},"\"Situated ethics\"":{"\"Situated ethics\"":"# \"Situated ethics\"\n\n\"Situated ethics,\" here, refers to the notion that a person's understandings of and commitments to ethics or morality are greatly linked to their own experiences, positionalities, and political orientations. Note that this understanding of \"situated ethics\" is an application of Donna Haraway's idea of \"situated knowledges\" (1988) to the arena of ethical perspectives.\n","slug":"situated-ethics"},"sort()":{"sort()":"# sort()\n\n`stort()` is a method that sorts the items from a list in alphabetical order.\n\n# Tutorials\n\n- Check out these examples for using [`sort()`](https://www.w3schools.com/python/ref_list_sort.asp) from w3schools.\n","slug":"sort"},"Spatial Join":{"Spatial Join":"# Spatial Join\n\na GIS operation that affixes data from one feature layer's attribute table to another from a spatial perspective. Spatial joins begin by selecting a target feature and comparing it spatially to other feature layers. \n\nThere are two types of spatial joins--*spatial join by attribute* and *spatial join by location*. Both of them are ways that the mapping software will let you add data from one map layer or file to another map layer. A *spatial join by attribute* is used when you want to join non-spatial data, such as a text file, to spatial data, such as a shapefile. A *spatial join by location* is used when you want to join two layers of spatial data (e.g. a points layer to a polygon layer). \n","slug":"spatialjoin"},"SQL":{"SQL":"# SQL\n\nSQL stands for Structured Query Language, and is a programming language for interacting with data in a relational database.\n","slug":"sql"},"SQLite":{"SQLite":"# SQLite\n\nSQLite is one implementation of SQL, which requres less work, operates on regular text files and does not require a server connection unlike other implementations such as PostgreSQL and MySQL.\n","slug":"sqlite"},"Stemming":{"Stemming":"# Stemming\n\nA process of collapsing words in an attempt to reduce the number of words, and get a realistic understanding of the meaning of a text. Stemming cuts off affixes to find the root (or the stem) of the word. See \"lemmatization\" in this glossary for another process of collapsing words in a corpus.","slug":"stemming"},"Stop Words":{"Stop Words":"# Stop Words\n\nWords that appear frequently in a language, often adding grammatical structure, but little semantic content.","slug":"stop-words"},"string":{"string":"# string\n\nA data type in Python that represents a sequence of alphanumeric and/or special characters enclosed within single or double quotes.\n\nFor example, the following are all strings:\n\n`\"hello world!\"`\n`\"The answer is 3\"`\n`\"!!!\"`\n\n# Readings\n\n- Read more about [strings](https://www.w3schools.com/python/python_strings.asp) on w3schools.\n","slug":"string"},"Surveillance":{"Surveillance":"# Surveillance\n\nSurveillance refers to \"the watch or guard kept over a person, etc., [especially] over a suspected person, a prisoner, or the like; often, spying, supervision\" or \"supervision for the purpose of direction or control\" (source: Oxford English Dictionary online). Surveillance, per my understanding, includes research (including *\"big data\"* research) of people's personal digital data that is conducted without their informed consent, as well as businesses' or governments' uses of various programs and devices to record or listen to people's behaviors, data, voices etc.\n","slug":"surveillance"},"Syntax Errors":{"Syntax Errors":"# Syntax Errors\n\nAlong with traceback errors, syntax errors are a common type of error in Python code. It appears when Python is unable to understand a line of code, meaning that there is a mistake. Often, syntax errors point to typos, indentation, or incomplete expressions, like missing quotation marks or parentheses. \n\nWhen a syntax error occurs, the interpreter will display a caret pointing to the area where the error occured. It will also display the message: `SyntaxError: invalid syntax`. Take a close look at the display message to get more information about your error, and help you with debugging.\n\n# Readings\n\n- See a fuller description of [syntax errors](https://geek-university.com/python/syntax-and-logical-errors/) on Geek University. \n\n- To see [a comprehensive list of possible errors](https://www.tutorialsteacher.com/python/error-types-in-python), check out this resource on Tutorials Teacher.\n","slug":"syntax_error"},"Tag":{"Tag":"# Tag\n\nTags are used in HTML to apply elements. Tags are contained within `<   >` symbols.  ","slug":"tag"},"Text Normalization":{"Text Normalization":"# Text Normalization\n\nThe process of taking a list of words and transforming it into a more uniform sequence.","slug":"text-normalization"},"Text editor ":{"Text editor ":"# Text editor \n\nA program for creating and editing plain text files. Unlike word processors such as LibreOffice and Word, which create complex documents in the form of archives that include formatting information and other metadata, a plain text editor creates a single file. Programmers tend to use plain text files because computers can work with them easily. Sublime Text, Nano, and VI are examples of text editors.\n","slug":"texteditor"},"Tidy Data":{"Tidy Data":"# Tidy Data\n\nTidy data are a way of processing and organizing data in to a data structure that follows these rules:\n\n1. Each variable is in a column.\n2. Each observation is a row.\n3. Each value is a cell.\n\n## Readings\n\n- [Tidy Data](https://www.jstatsoft.org/article/view/v059i10)","slug":"tidy-data"},"Token":{"Token":"# Token\n\nAn instance of a type (see \"type\" in this glossary).","slug":"token"},"Tokenizing":{"Tokenizing":"# Tokenizing\n\nA process of breaking text into individual linguistic units. This process often involves removing punctuation and making all words lowercase. ","slug":"tokenizing"},"Traceback Errors":{"Traceback Errors":"# Traceback Errors\n\nAlong with syntax errors, traceback errors are a common type of error in Python code. It appears during the execution of the code, when Python is unable to continue, meaning that there is a problem with the flow of your program. Often, traceback errors point to undefined variables or functions.\n\nWhen a traceback error occurs, the interpreter will give you a little more information about the error. If it's a name error, that means that something is not defined properly. If it's a type error, that means that an operation or function is of the wrong type. Take a close look at the display message to get more information about your error, and help you with debugging.\n\n# Readings\n\n- See a fuller description of [traceback errors](https://realpython.com/python-traceback/) on Real Python. \n\n- To see [a comprehensive list of possible errors](https://www.tutorialsteacher.com/python/error-types-in-python), check out this resource on Tutorials Teacher.\n","slug":"traceback_error"},"Tuples":{"Tuples":"# Tuples\n\nA collection which is ordered and unchangeable. In Python tuples are written with parenthesis.","slug":"tuples"},"type()":{"type()":"# type()\n\n**Python**\n\n`type()` is a function that evaluates the data type of the object within the parenthesis. For a string `\"hello world\"`, it will return: `<str>`; for an integer `5`, it will return `<int>` and so on.\n\n**Text analysis**\n\nIn our text analysis workshop, `type` means unique vocabulary items in a corpus. (Ex: \"Whale\" and \"whale\" are different *types*.)\n\n# Readings\n\n- Read more about [`type()`](https://www.programiz.com/python-programming/methods/built-in/type) as a Python command, and more things it can calculate.\n","slug":"type"},"Universal design":{"Universal design":"# Universal design\n\nUniversal design refers to \"the process of creating products that are usable by people with the widest possible range of abilities, operating within the widest possible range of situations\" (source: [Shawn Lawton Henry, et al. 2014](https://dl.acm.org/citation.cfm?doid=2596695.2596719)).\n","slug":"universal-design"},"Variables":{"Variables":"# Variables\n\nA variable is a name that is assigned to a value, and it stores data for future use. Variable assignment uses a single `=`. The name given is on the left of the `=`, the value is on the right of the `=`.\t\n\nAssignment looks like this:\n\n```python\nx = 3\nname = \"Patrick\"\nname2 = \"Ignatz\"\ngrocery_list = [\"tomato\", \"limes\", \"chocolate\"]\n```\n\n# Tutorials\n\n- Learn more about [variables](https://www.w3schools.com/python/python_variables.asp) on w3schools.\n","slug":"variables"},"Vector":{"Vector":"# Vector\n\nA scalable point, line or polygon that can be easily created, edited, or deleted using GIS. Does not have a specific resolution. In QGIS, vectors are contained in vector layers, that can only contain a single type of vectors. Each vector represents a single feature, although some features may be represented by more than one vector (e.g. the vector of the United States includes the mainland U.S. polygon but also polygons for Alaska and Hawaii).\n","slug":"vector"},"Version Control":{"Version Control":"# Version Control\n\nVersion control is a system that records changes to a file or set of files over time so that you can recall specific versions later. It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. \n\nUsing a version control software like Git generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead.\n\n## Readings\n\n- Bryan, J. (2017). _[Excuse me, do you have a moment to talk about version control?](https://doi.org/10.7287/peerj.preprints.3159v2)_ PeerJ Preprints.\n\n## Tutorials\n\n- [Getting Started - About Version Control](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control). Git documentation. \n","slug":"version-control"},"Web Hosting":{"Web Hosting":"# Web Hosting\n\nWeb Hosting refers to servers that make HTML ","slug":"webhosting"},"while loops":{"while loops":"# while loops\n\nLike for loops, while loops are a way of going through items in a list. The difference is that while loops will continue to execute as long as a certain condition is true. To get out of the loop, use the break command, or type `control-c` or `quit()` in the interpreter. Otherwise, the loop will keep going.\n\n```python\nwhile True:\n    print(\"Oh no! I'm stuck...\")\n```\n\n# Tutorials\n\n- Check out this demonstration of [while loops](https://www.w3schools.com/python/python_while_loops.asp) on w3schools.\n","slug":"while_loop"},"XML (file format)":{"XML (file format)":"# XML (file format)\n\nXML or eXstensible Markup Language is a file format that uses a nested structure where the \"tags\" like `<Cat>` contain other tags inside them, like `<firstName>`. This format is good for organizing the layout of a document in a tree-like format, just like HTML, where we want to nest elements like a sentence within a paragraph, for example. XML does not carry any information about how to be displayed and can be used in a variety of presentation scenarios. \n\n```xml\n<Cats> \n    <Cat> \n        <firstName>Smally</firstName> \n        <lastName>McTiny</lastName> \n    </Cat> \n    <Cat> \n        <firstName>Kitty</firstName> \n        <lastName>Kitty</lastName> \n    </Cat> \n    <Cat> \n        <firstName>Foots</firstName> \n        <lastName>Smith</lastName> \n    </Cat> \n    <Cat> \n        <firstName>Tiger</firstName> \n        <lastName>Jaws</lastName> \n    </Cat> \n</Cats> \n```","slug":"xml"}}},"__N_SSG":true}